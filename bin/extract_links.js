#!/usr/bin/env node

/* Links generated by esdocs look like this:
    <li data-ice="manualNav" class="indent-h1" data-link="manual/assertions.html"><a href="manual/assertions.html" data-ice="link">Assertions</a></li>
    <li data-ice="manualNav" class="indent-h2" data-link="manual/assertions.html"><a href="manual/assertions.html#isboolean-value-" data-ice="link">isBoolean(value)</a></li>
    <li data-ice="manualNav" class="indent-h2" data-link="manual/assertions.html"><a href="manual/assertions.html#isstring-value-" data-ice="link">isString(value)</a></li>

  This script converts them BACK to markdown for the README

    ## Assertions

    * [isBoolean(value)](https://abw.github.io/badger-utils/docs/manual/assertions.html#isboolean-value-)
    * [isString(value)](https://abw.github.io/badger-utils/docs/manual/assertions.html#isstring-value-)

  It requires the docs to be built and served locally

    $ pnpm docs:build && docs:serve

*/

import { fail, splitLines } from '../src/index.js';

const url  = 'http://localhost:3000/manual';
const base = 'https://abw.github.io/badger-utils/docs/';
const response = await fetch(url)
const text = await response.text();
const tocs = [...text.matchAll(/<ul class="manual-toc">\s(.*?)<\/ul>/sg)]

// skip the first one
tocs.shift();

for (let toc of tocs) {
  parseToc(toc[1])
}

function parseToc(toc) {
  const lines = splitLines(toc.trim()).map(
    line => {
      const match = line.match(/<a href="(.*?)".*?>(.*?)</)
        || fail("Can't parse TOC line: ", line);
      return [match[1], match[2]];
    }
  )
  let output = [ ];
  const heading = lines.shift();
  output.push(`\n## ${heading[1]}\n`);
  lines.forEach(
    line => output.push(`* [${line[1]}](${base}${line[0]})`)
  )
  // console.log('lines:', lines);
  console.log(output.join("\n"));

}

