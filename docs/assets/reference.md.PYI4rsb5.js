import{_ as t,c as e,o as a,a2 as r}from"./chunks/framework.Cf4MqoJe.js";const b=JSON.parse('{"title":"Function Reference","description":"","frontmatter":{},"headers":[],"relativePath":"reference.md","filePath":"reference.md","lastUpdated":1709285770000}'),o={name:"reference.md"},d=r('<h1 id="function-reference" tabindex="-1">Function Reference <a class="header-anchor" href="#function-reference" aria-label="Permalink to &quot;Function Reference&quot;">​</a></h1><h2 id="assertions" tabindex="-1">Assertions <a class="header-anchor" href="#assertions" aria-label="Permalink to &quot;Assertions&quot;">​</a></h2><p>Functions for testing the type of a value.</p><table><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td><a href="./assertions.html#isBoolean"><code>isBoolean(value)</code></a></td><td>Test if a value is a Boolean</td></tr><tr><td><a href="./assertions.html#isString"><code>isString(value)</code></a></td><td>Test if a value is a String</td></tr><tr><td><a href="./assertions.html#isNumber"><code>isNumber(value)</code></a></td><td>Test if a value is a Number</td></tr><tr><td><a href="./assertions.html#isInteger"><code>isInteger(value)</code></a></td><td>Test if a value is an Integer</td></tr><tr><td><a href="./assertions.html#isFloat"><code>isFloat(value)</code></a></td><td>Test if a value is a Float</td></tr><tr><td><a href="./assertions.html#isArray"><code>isArray(value)</code></a></td><td>Test if a value is an Array</td></tr><tr><td><a href="./assertions.html#isFunction"><code>isFunction(value)</code></a></td><td>Test if a value is a Function</td></tr><tr><td><a href="./assertions.html#isRegExp"><code>isRegExp(value)</code></a></td><td>Test if a value is a RegExp</td></tr><tr><td><a href="./assertions.html#isObject"><code>isObject(value)</code></a></td><td>Test if a value is an Object</td></tr><tr><td><a href="./assertions.html#isUndefined"><code>isUndefined(value)</code></a></td><td>Test if a value is undefined</td></tr><tr><td><a href="./assertions.html#isNull"><code>isNull(value)</code></a></td><td>Test if a value is null</td></tr><tr><td><a href="./assertions.html#hasValue"><code>hasValue(value)</code></a></td><td>Test if a value is not null or undefined</td></tr><tr><td><a href="./assertions.html#noValue"><code>noValue(value)</code></a></td><td>Test if a value is null or undefined</td></tr><tr><td><a href="./assertions.html#haveValues"><code>haveValue(...values)</code></a></td><td>Test if all values are not null or undefined</td></tr><tr><td><a href="./assertions.html#firstValue"><code>firstValue(...values)</code></a></td><td>Return the first value that is not null or undefined</td></tr></tbody></table><h2 id="numbers" tabindex="-1">Numbers <a class="header-anchor" href="#numbers" aria-label="Permalink to &quot;Numbers&quot;">​</a></h2><p>Functions for working with numbers.</p><table><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td><a href="./numbers.html#range"><code>range(from, to, step=1)</code></a></td><td>Return an array of numbers in a range</td></tr><tr><td><a href="./numbers.html#formatNumber"><code>formatNumber(number, options)</code></a></td><td>Format a number using Intl.NumberFormat</td></tr><tr><td><a href="./numbers.html#currency"><code>currency(number, options)</code></a></td><td>Format a number as a currency</td></tr><tr><td><a href="./numbers.html#commas"><code>commas(n)</code></a></td><td>Add commas as thousand separators to a number</td></tr><tr><td><a href="./numbers.html#setNumberDefaults"><code>setNumberDefaults(defaults)</code></a></td><td>Set the default formatting options for numbers</td></tr></tbody></table><h2 id="text" tabindex="-1">Text <a class="header-anchor" href="#text" aria-label="Permalink to &quot;Text&quot;">​</a></h2><p>Functions for working with text.</p><table><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td><a href="./text.html#splitLines"><code>splitLines(text)</code></a></td><td>Split text into lines</td></tr><tr><td><a href="./text.html#splitList"><code>splitList(value)</code></a></td><td>Split a whitespace delimited string into an array of words</td></tr><tr><td><a href="./text.html#splitHash"><code>splitHash(value,set=true, hash={})</code></a></td><td>Split a whitespace delimited string into a hash table object for quick lookup</td></tr><tr><td><a href="./text.html#joinList"><code>joinList(array, joint=&#39; &#39;, lastJoint=joint)</code></a></td><td>Join an array of words into a single string with separators</td></tr><tr><td><a href="./text.html#joinListAnd"><code>joinListAnd(array, joint=&#39;, &#39;, lastJoint=&#39; and &#39;)</code></a></td><td>Join an array of words using commas and &#39;and&#39;, e.g. <code>David, Nigel and Derek</code></td></tr><tr><td><a href="./text.html#joinListOr"><code>joinListOr(array, joint=&#39;, &#39;, lastJoint=&#39; or &#39;)</code></a></td><td>Join an array of words using commas and &#39;or&#39;, e.g. <code>David, Nigel or Derek</code></td></tr><tr><td><a href="./text.html#capitalise"><code>capitalise(word) / capitalize(word)</code></a></td><td>Capitalise a word</td></tr><tr><td><a href="./text.html#capitaliseWords"><code>capitaliseWords(string) / capitalizeWords(string)</code></a></td><td>Capitalise all words in a string</td></tr><tr><td><a href="./text.html#snakeToStudly"><code>snakeToStudly(snake)</code></a></td><td>Convert snake case to studly caps (e.g. <code>foo_bar</code> to <code>FooBar</code>)</td></tr><tr><td><a href="./text.html#snakeToCamel"><code>snakeToCamel(snake)</code></a></td><td>Convert snake case to camel case (e.g. <code>foo_bar</code> to <code>fooBar</code>)</td></tr><tr><td><a href="./text.html#plural"><code>plural(singular)</code></a></td><td>Return the plural form of a singular word</td></tr><tr><td><a href="./text.html#singular"><code>singular(plural)</code></a></td><td>Return the singular form of a plural word</td></tr><tr><td><a href="./text.html#inflect"><code>inflect(n, singular, plural, no=&#39;no&#39;)</code></a></td><td>Inflect a noun based on the plurality (e.g. <code>no cats</code>, <code>1 cat</code>, <code>2 cats</code>)</td></tr><tr><td><a href="./text.html#Inflect"><code>Inflect(n, singular, plural, no=&#39;No&#39;)</code></a></td><td>Inflect a noun with first capital letter (e.g. <code>No cats</code>, <code>1 cat</code>, <code>2 cats</code>)</td></tr><tr><td><a href="./text.html#format"><code>format(message, data)</code></a></td><td>Format a string to fill in <code>&lt;placeholder&gt;</code> markers</td></tr></tbody></table><h2 id="objects" tabindex="-1">Objects <a class="header-anchor" href="#objects" aria-label="Permalink to &quot;Objects&quot;">​</a></h2><p>Functions for working with objects.</p><table><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td><a href="./objects.html#hash"><code>hash(source, options)</code></a></td><td>Modify (a.k.a &quot;make a hash of&quot;) an object (a.k.a a &quot;hash table&quot;)</td></tr><tr><td><a href="./objects.html#objMap"><code>objMap(obj, fn)</code></a></td><td>Apply a function to each value in an object</td></tr><tr><td><a href="./objects.html#remove"><code>remove(object, key)</code></a></td><td>Remove a value from an object</td></tr><tr><td><a href="./objects.html#extract"><code>extract(object, keys, options)</code></a></td><td>Extract values from an object</td></tr><tr><td><a href="./objects.html#keys"><code>keys(object)</code></a></td><td>Return the keys for an object</td></tr><tr><td><a href="./objects.html#values"><code>values(object)</code></a></td><td>Return the values for an object</td></tr><tr><td><a href="./objects.html#entries"><code>entries(object)</code></a></td><td>Return the entries (<code>[key, value]</code> pairs) for an object</td></tr></tbody></table><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><p>Functions for working with functions.</p><table><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td><a href="./functions.html#maybeFunction"><code>maybeFunction(fn, args)</code></a></td><td>Call a function or simply return a static value that isn&#39;t a function</td></tr></tbody></table><h2 id="select" tabindex="-1">Select <a class="header-anchor" href="#select" aria-label="Permalink to &quot;Select&quot;">​</a></h2><p>Function for selecting things.</p><table><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td>[<code>selector(spec)</code>(select#selector)</td><td>Factory to create a function that will select values using various criteria</td></tr></tbody></table><h2 id="sort" tabindex="-1">Sort <a class="header-anchor" href="#sort" aria-label="Permalink to &quot;Sort&quot;">​</a></h2><p>Functions for sorting arrays of objects.</p><table><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td><a href="./sort.html#stringSort"><code>stringSort(field)</code></a></td><td>Sort using a string field</td></tr><tr><td><a href="./sort.html#numberSort"><code>numberSort(field)</code></a></td><td>Sort using a numeric field</td></tr><tr><td><a href="./sort.html#integerSort"><code>integerSort(field)</code></a></td><td>Sort using an integer field</td></tr><tr><td><a href="./sort.html#booleanSort"><code>booleanSort(field)</code></a></td><td>Sort using a boolean field</td></tr><tr><td><a href="./sort.html#multiSort"><code>multiSort(fields)</code></a></td><td>Sort using multiple fields</td></tr><tr><td><a href="./sort.html#stringField"><code>stringField(obj,field)</code></a></td><td>Extract a string field from an object</td></tr><tr><td><a href="./sort.html#numberField"><code>numberField(obj,field)</code></a></td><td>Extract a number field from an object</td></tr><tr><td><a href="./sort.html#integerField"><code>integerField(obj,field)</code></a></td><td>Extract an integer field from an object</td></tr><tr><td><a href="./sort.html#booleanField"><code>booleanField(obj,field)</code></a></td><td>Extract a boolean field from an object</td></tr><tr><td><a href="./sort.html#descendingOrder"><code>descendingOrder(sortFn)</code></a></td><td>Sort in descending order</td></tr><tr><td><a href="./sort.html#ascendingOrder"><code>ascendingOrder(sortFn)</code></a></td><td>Sort in ascending order</td></tr></tbody></table><h2 id="timing" tabindex="-1">Timing <a class="header-anchor" href="#timing" aria-label="Permalink to &quot;Timing&quot;">​</a></h2><p>Timing-related function.</p><table><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td><a href="./timing.html#debounce"><code>debounce(func, timeout=300)</code></a></td><td>Create a debouncing function</td></tr><tr><td><a href="./timing.html#sleep"><code>sleep(ms)</code></a></td><td>Delay function which waits before resolving</td></tr></tbody></table><h2 id="errors" tabindex="-1">Errors <a class="header-anchor" href="#errors" aria-label="Permalink to &quot;Errors&quot;">​</a></h2><p>Functions for throwing errors.</p><table><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td><a href="./errors.html#fail"><code>fail(message)</code></a></td><td>Throw an error</td></tr><tr><td><a href="./errors.html#failMsg"><code>failMsg(message, data)</code></a></td><td>Throw an error using a message format string</td></tr><tr><td><a href="./errors.html#rethrow"><code>rethrow(error)</code></a></td><td>Rethrow an error</td></tr></tbody></table><h2 id="miscellaneous" tabindex="-1">Miscellaneous <a class="header-anchor" href="#miscellaneous" aria-label="Permalink to &quot;Miscellaneous&quot;">​</a></h2><p>Miscellaneous functions.</p><table><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td><a href="./misc.html#doNothing"><code>doNothing()</code></a></td><td>Function that does nothing</td></tr><tr><td><a href="./misc.html#defaultLocale"><code>defaultLocale()</code></a></td><td>Return the default locale</td></tr></tbody></table>',31),n=[d];function i(s,c,l,h,u,f){return a(),e("div",null,n)}const g=t(o,[["render",i]]);export{b as __pageData,g as default};
