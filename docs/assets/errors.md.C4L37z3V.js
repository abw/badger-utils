import{_ as s,c as a,o as i,a2 as e}from"./chunks/framework.Cf4MqoJe.js";const E=JSON.parse('{"title":"Errors","description":"","frontmatter":{},"headers":[],"relativePath":"errors.md","filePath":"errors.md","lastUpdated":1709285770000}'),t={name:"errors.md"},r=e(`<h1 id="errors" tabindex="-1">Errors <a class="header-anchor" href="#errors" aria-label="Permalink to &quot;Errors&quot;">​</a></h1><p>Functions for throwing errors.</p><h2 id="fail" tabindex="-1">fail(message) <a class="header-anchor" href="#fail" aria-label="Permalink to &quot;fail(message) {#fail}&quot;">​</a></h2><p>This function throws an error with a message constructed by concatenating all arguments passed to it.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Failed to &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;insert&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; record&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// -&gt; throws error with message &#39;Failed to insert record&#39;</span></span></code></pre></div><p>The benefit of using this function over <code>throw</code> is that it can be used in an expression.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;No x specified&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="failMsg" tabindex="-1">failMsg(message, data) <a class="header-anchor" href="#failMsg" aria-label="Permalink to &quot;failMsg(message, data) {#failMsg}&quot;">​</a></h2><p>This function throws an error with a message generated from expanding a message template using the <a href="./text.html#format"><code>format()</code></a> function.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">failMsg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Failed to &lt;action&gt; record&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { action: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;insert&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// -&gt; throws error with message &#39;Failed to insert record&#39;</span></span></code></pre></div><h2 id="rethrow" tabindex="-1">rethrow(error) <a class="header-anchor" href="#rethrow" aria-label="Permalink to &quot;rethrow(error) {#rethrow}&quot;">​</a></h2><p>Function to rethrow an error. The benefit of using this function over <code>throw</code> is that it can be used in an expression.</p>`,12),n=[r];function h(l,o,p,d,k,c){return i(),a("div",null,n)}const u=s(t,[["render",h]]);export{E as __pageData,u as default};
