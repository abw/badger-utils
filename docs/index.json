[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/utils/assert.js",
    "content": "/**\n * Determines if a value is a boolean\n * @param {Boolean} value - value to test\n * @return {Boolean} true if `value` is a string or false if not\n */\nexport function isBoolean(value) {\n  return typeof value === 'boolean';\n}\n\n/**\n * Determines if a value is a string\n * @param {String} value - value to test\n * @return {Boolean} true if `value` is a string or false if not\n */\nexport function isString(value) {\n  return typeof value === 'string';\n}\n\n/**\n * Determines if a value is a number\n * @param {Number} value - value to test\n * @return {Boolean} true if `value` is a number or false if not\n */\nexport function isNumber(value) {\n  return typeof value === 'number';\n}\n\n/**\n * Determines if a value is an Integer\n * @param {Integer} value - value to test\n * @return {Boolean} true if `value` is an integer or false if not\n */\nexport function isInteger(value) {\n  return Number.isInteger(value);\n}\n\n/**\n * Determines if a value is a floating point number\n * @param {Number} value - value to test\n * @return {Boolean} true if `value` is an integer or false if not\n */\nexport function isFloat(value) {\n  return isNumber(value) && ! isInteger(value);\n}\n\n/**\n * Determines if a value is an array\n * @param {Array} value - value to test\n * @return {Boolean} true if `value` is an Array or false if not\n */\nexport function isArray(value) {\n  return Array.isArray(value);\n}\n\n/**\n * Determines if a value is a Function\n * @param {Function} value - value to test\n * @return {Boolean} true if `value` is a Function or false if not\n */\nexport function isFunction(value) {\n  return typeof value === 'function'\n}\n\n/**\n * Determines if a value is an Object (but not an Array)\n * @param {Object} value - value to test\n * @return {Boolean} true if `value` is an Object or false if not\n */\nexport function isObject(value) {\n  return typeof value === \"object\"\n    && ! isArray(value)\n    && ! isNull(value);\n}\n\n/**\n * Determines if a value is `undefined`\n * @param {any} value - value to test\n * @return {Boolean} true if `value` is `undefined` or false if not\n */\nexport function isUndefined(value) {\n  return typeof value === 'undefined';\n}\n\n/**\n * Determines if a value is `null`\n * @param {any} value - value to test\n * @return {Boolean} true if `value` is `null` or false if not\n */\nexport function isNull(value) {\n  return value === null;\n}\n\n/**\n * Determines if a value is defined and not null\n * @param {any} value - value to test\n * @return {Boolean} true if `value` is not `undefined` or `null`\n */\nexport function hasValue(value) {\n  return ! (isUndefined(value) || isNull(value));\n}\n\n/**\n * Determines if all values are defined and not null\n * @param {any[]} values - values to test\n * @return {Boolean} true if all values are not `undefined` or `null`\n */\nexport function haveValue(...values) {\n  return values.every( value => hasValue(value) );\n}\n\n/**\n * Determines if a value is undefined or null\n * @param {any} value - value to test\n * @return {Boolean} true if `value` is `undefined` or `null`\n */\nexport function noValue(value) {\n  return ! hasValue(value);\n}\n\n/**\n * Returns the first argument that has a value\n * @param {any[]} values - values to test\n * @return {any} first argument that has a value that is not `undefined` or `null`\n */\nexport function firstValue(...values) {\n  return values.find( value => hasValue(value) );\n}\n\n",
    "static": true,
    "longname": "/Users/abw/js/badger-utils/src/utils/assert.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "isBoolean",
    "memberof": "src/utils/assert.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/assert.js~isBoolean",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{isBoolean}",
    "description": "Determines if a value is a boolean",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if `value` is a string or false if not"
    }
  },
  {
    "__docId__": 50,
    "kind": "function",
    "name": "isString",
    "memberof": "src/utils/assert.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/assert.js~isString",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{isString}",
    "description": "Determines if a value is a string",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if `value` is a string or false if not"
    }
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "isNumber",
    "memberof": "src/utils/assert.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/assert.js~isNumber",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{isNumber}",
    "description": "Determines if a value is a number",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if `value` is a number or false if not"
    }
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "isInteger",
    "memberof": "src/utils/assert.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/assert.js~isInteger",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{isInteger}",
    "description": "Determines if a value is an Integer",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if `value` is an integer or false if not"
    }
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "isFloat",
    "memberof": "src/utils/assert.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/assert.js~isFloat",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{isFloat}",
    "description": "Determines if a value is a floating point number",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if `value` is an integer or false if not"
    }
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "isArray",
    "memberof": "src/utils/assert.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/assert.js~isArray",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{isArray}",
    "description": "Determines if a value is an array",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if `value` is an Array or false if not"
    }
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "isFunction",
    "memberof": "src/utils/assert.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/assert.js~isFunction",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{isFunction}",
    "description": "Determines if a value is a Function",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if `value` is a Function or false if not"
    }
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "isObject",
    "memberof": "src/utils/assert.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/assert.js~isObject",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{isObject}",
    "description": "Determines if a value is an Object (but not an Array)",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if `value` is an Object or false if not"
    }
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "isUndefined",
    "memberof": "src/utils/assert.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/assert.js~isUndefined",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{isUndefined}",
    "description": "Determines if a value is `undefined`",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if `value` is `undefined` or false if not"
    }
  },
  {
    "__docId__": 58,
    "kind": "function",
    "name": "isNull",
    "memberof": "src/utils/assert.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/assert.js~isNull",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{isNull}",
    "description": "Determines if a value is `null`",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if `value` is `null` or false if not"
    }
  },
  {
    "__docId__": 59,
    "kind": "function",
    "name": "hasValue",
    "memberof": "src/utils/assert.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/assert.js~hasValue",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{hasValue}",
    "description": "Determines if a value is defined and not null",
    "lineNumber": 98,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if `value` is not `undefined` or `null`"
    }
  },
  {
    "__docId__": 60,
    "kind": "function",
    "name": "haveValue",
    "memberof": "src/utils/assert.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/assert.js~haveValue",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{haveValue}",
    "description": "Determines if all values are defined and not null",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "values to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if all values are not `undefined` or `null`"
    }
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "noValue",
    "memberof": "src/utils/assert.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/assert.js~noValue",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{noValue}",
    "description": "Determines if a value is undefined or null",
    "lineNumber": 116,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if `value` is `undefined` or `null`"
    }
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "firstValue",
    "memberof": "src/utils/assert.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/assert.js~firstValue",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{firstValue}",
    "description": "Returns the first argument that has a value",
    "lineNumber": 125,
    "params": [
      {
        "nullable": null,
        "types": [
          "any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "values to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "first argument that has a value that is not `undefined` or `null`"
    }
  },
  {
    "__docId__": 63,
    "kind": "file",
    "name": "src/utils/error.js",
    "content": "import { format } from \"./format.js\";\n\n/**\n * Throws a new Error object\n * @param {String[]} message - error message string(s)\n * @throws {Error}\n */\nexport function fail(...message) {\n  throw new Error(message.join(''));\n}\n\n/**\n * Throws a new Error object with a message generated from a format string.\n * @param {String} message - message format\n * @param {Object} data - data items to embed in message\n * @throws {Error}\n */\nexport function failMsg(message, data) {\n  throw new Error(\n    format(message, data)\n  );\n}\n\n/**\n * Re-throw an existing Error object\n * @param {Error} error - error object\n * @throws {Error}\n */\nexport function rethrow(error) {\n  throw error;\n}\n\n",
    "static": true,
    "longname": "/Users/abw/js/badger-utils/src/utils/error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 64,
    "kind": "function",
    "name": "fail",
    "memberof": "src/utils/error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/error.js~fail",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{fail}",
    "description": "Throws a new Error object",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "error message string(s)"
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 65,
    "kind": "function",
    "name": "failMsg",
    "memberof": "src/utils/error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/error.js~failMsg",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{failMsg}",
    "description": "Throws a new Error object with a message generated from a format string.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "message format"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "data items to embed in message"
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 66,
    "kind": "function",
    "name": "rethrow",
    "memberof": "src/utils/error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/error.js~rethrow",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{rethrow}",
    "description": "Re-throw an existing Error object",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "error object"
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 67,
    "kind": "file",
    "name": "src/utils/format.js",
    "content": "import { noValue } from \"./assert.js\";\nimport { fail } from \"./error.js\";\n\n/**\n * Function to format strings by inserting values into placeholder locations.\n * @param {!String} msg - the source string\n * @param {Object} data - data items to insert into the string\n * @returns {String} - the expanded string\n * @example\n * format('Hello <name>!', { name: 'World'});  // Hello World!\n */\nexport const format = (msg, data) =>\n  msg.replace(\n    /<(\\w+)>/g,\n    (_, key) => {\n      const val = data[key];\n      if (noValue(val)) {\n        fail(`Invalid variable expansion <${key}> in message format: ${msg}`);\n      }\n      return val;\n    }\n  );\n",
    "static": true,
    "longname": "/Users/abw/js/badger-utils/src/utils/format.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 68,
    "kind": "function",
    "name": "format",
    "memberof": "src/utils/format.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/format.js~format",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{format}",
    "description": "Function to format strings by inserting values into placeholder locations.",
    "examples": [
      "format('Hello <name>!', { name: 'World'});  // Hello World!"
    ],
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} - the expanded string"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "the source string"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "data items to insert into the string"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "the expanded string"
    }
  },
  {
    "__docId__": 69,
    "kind": "file",
    "name": "src/utils/misc.js",
    "content": "/**\n * Do nothing.  Nothing at all.\n */\nexport function doNothing() {\n  // speak again Cordelia\n}\n\n/**\n * Returns the default locale.\n */\nexport function defaultLocale() {\n  return Intl.DateTimeFormat().resolvedOptions().locale;\n}",
    "static": true,
    "longname": "/Users/abw/js/badger-utils/src/utils/misc.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "doNothing",
    "memberof": "src/utils/misc.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/misc.js~doNothing",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{doNothing}",
    "description": "Do nothing.  Nothing at all.",
    "lineNumber": 4,
    "params": [],
    "return": null
  },
  {
    "__docId__": 71,
    "kind": "function",
    "name": "defaultLocale",
    "memberof": "src/utils/misc.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/misc.js~defaultLocale",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{defaultLocale}",
    "description": "Returns the default locale.",
    "lineNumber": 11,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "file",
    "name": "src/utils/numbers.js",
    "content": "import { noValue } from \"./assert.js\";\nimport { defaultLocale } from \"./misc.js\";\n\n// this is an ugly hack to provide backwards compatibility\n// with some of my older utility functions that are very much\n// specific to me and my locale (e.g. formatting prices using\n// British pounds)\nlet numberDefaults = {\n  locale:       defaultLocale(),\n  currency:     'GBP',\n  currencySign: '£',\n  thousands:    ',',\n};\n\n/**\n * Function to set the default options for formatting numbers.\n * @param {Object} defaults - default options\n * @param {String} [defaults.locale] - default locale\n * @param {String} [defaults.currency] - default currency, e.g. `GBP`\n * @param {String} [defaults.currencySign] - default currency sign, e.g. `£`\n * @param {String} [defaults.thousands] - default separator for thousands, e.g. `,`\n */\nexport function setNumberDefaults(defaults={}) {\n  numberDefaults = { ...numberDefaults, ...defaults };\n}\n\n/**\n * Function to create an array with a range of numbers.  Note that this will\n * include the last value.\n * @param {Integer} first - first number\n * @param {Integer} last - last number\n * @param {Integer} [step=1] - step number\n */\nexport const range = (first, last, step=1) => {\n  const down = last < first;\n  const walk = down ? -Math.abs(step) : step;\n  return Array(1 + Math.floor(Math.abs((last - first) / step)))\n    .fill(first)\n    .map((x, y) => x + y * walk)\n}\n\n/**\n * Function to format a number with various options.\n * @param {Number} number - number to format\n * @param {Object} [options] - configuration options\n * @param {Object} [options.locale] - locale\n */\nexport function formatNumber(number, options={}) {\n  return new Intl.NumberFormat(\n    options.locale || numberDefaults.locale,\n    options\n  ).format(number)\n}\n\n/**\n * Function to format a number as a currency.\n * @param {Number} number - number to format\n * @param {Object} [options] - configuration options\n * @param {Object} [options.locale] - locale\n * @param {Object} [options.currency] - currency code, e.g. `GBP` or `USD`\n */\nexport function currency(number, options={}) {\n  return formatNumber(\n    number,\n    {\n      style: 'currency',\n      currency: numberDefaults.currency,\n      ...options\n    }\n  );\n}\n\n/**\n * Function to add commas as thousand separators in a number.\n * @param {Integer} n - number of items\n * @param {String} [thousands=','] - optional thousands separator instead of a comma\n * @example\n * commas(12345)          // 12,345\n * commas(12345.67)       // 12,345.67\n * commas(12345.67, ' ')  // 12 345.67\n */\nexport function commas(n, thousands=numberDefaults.thousands) {\n  if (noValue(n)) {\n    return '';\n  }\n  var bits  = n.toString().split('.'),\n    rgx   = /(\\d+)(\\d{3})/;\n\n  while (rgx.test(bits[0])) {\n    bits[0] = bits[0].replace(rgx, `$1${thousands}$2`);\n  }\n  return bits.join('.');\n}\n\n",
    "static": true,
    "longname": "/Users/abw/js/badger-utils/src/utils/numbers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 73,
    "kind": "variable",
    "name": "numberDefaults",
    "memberof": "src/utils/numbers.js",
    "static": true,
    "longname": "src/utils/numbers.js~numberDefaults",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-utils",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "{\"locale\": *, \"currency\": string, \"currencySign\": string, \"thousands\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 74,
    "kind": "function",
    "name": "setNumberDefaults",
    "memberof": "src/utils/numbers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/numbers.js~setNumberDefaults",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{setNumberDefaults}",
    "description": "Function to set the default options for formatting numbers.",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "defaults",
        "description": "default options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "defaults.locale",
        "description": "default locale"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "defaults.currency",
        "description": "default currency, e.g. `GBP`"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "defaults.currencySign",
        "description": "default currency sign, e.g. `£`"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "defaults.thousands",
        "description": "default separator for thousands, e.g. `,`"
      }
    ],
    "return": null
  },
  {
    "__docId__": 75,
    "kind": "function",
    "name": "range",
    "memberof": "src/utils/numbers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/numbers.js~range",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{range}",
    "description": "Function to create an array with a range of numbers.  Note that this will\ninclude the last value.",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "first",
        "description": "first number"
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "last",
        "description": "last number"
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "step",
        "description": "step number"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "function",
    "name": "formatNumber",
    "memberof": "src/utils/numbers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/numbers.js~formatNumber",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{formatNumber}",
    "description": "Function to format a number with various options.",
    "lineNumber": 48,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "number to format"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.locale",
        "description": "locale"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "function",
    "name": "currency",
    "memberof": "src/utils/numbers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/numbers.js~currency",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{currency}",
    "description": "Function to format a number as a currency.",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "number to format"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.locale",
        "description": "locale"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.currency",
        "description": "currency code, e.g. `GBP` or `USD`"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "function",
    "name": "commas",
    "memberof": "src/utils/numbers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/numbers.js~commas",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{commas}",
    "description": "Function to add commas as thousand separators in a number.",
    "examples": [
      "commas(12345)          // 12,345\ncommas(12345.67)       // 12,345.67\ncommas(12345.67, ' ')  // 12 345.67"
    ],
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "number of items"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "','",
        "defaultRaw": "','",
        "name": "thousands",
        "description": "optional thousands separator instead of a comma"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "file",
    "name": "src/utils/object.js",
    "content": "import { isArray, isFunction, isObject, isString } from './assert.js';\nimport { fail } from './error.js';\nimport { splitHash } from './text.js';\n\n/**\n * Applies a function to each of the values of an object and returns\n * a new object.\n * @param {Object} obj - source object\n * @param {Function} fn - function to apply to each value\n * @return {Object} - new object with function applied to values\n * @example\n * objMap(\n *   { a: 'alpha', b: 'bravo' },\n *   v => v.toUpperCase()\n * )                        // returns { a: 'ALPHA', b: 'BRAVO' }\n */\nexport function objMap(obj, fn) {\n  return Object.keys(obj).reduce(\n    (result, key) => {\n      result[key] = fn(obj[key], key)\n      return result\n    },\n    {}\n  );\n}\n\n/**\n * Extracts a subset of items from an object.\n * @param {Object} object - source object\n * @param {Object|Array|String|RegExp|Function} keys - keys to extract\n * @param {Object} [options] -\n * @param {Boolean} [options.delete=false] - delete keys from source object\n * @param {Function} [options.key] - function to transform key\n * @param {Function} [options.value] - function to transform value\n * @return {Object} - new object with extracted values\n * @example\n * extract(\n *   { a: 'alpha', b: 'bravo', c: 'charlie' },\n *   { a: true, b: true }\n * ) // => { a: 'alpha', b: 'bravo' }\n * @example\n * extract(\n *   { a: 'alpha', b: 'bravo', c: 'charlie' },\n *   ['a', 'b']\n * ) // => { a: 'alpha', b: 'bravo' }\n * @example\n * extract(\n *   { a: 'alpha', b: 'bravo', c: 'charlie' },\n *   'a b'\n * ) // => { a: 'alpha', b: 'bravo' }\n * @example\n * extract(\n *   { a: 'alpha', b: 'bravo', c: 'charlie' },\n *   /^[a|b]$/\n * ) // => { a: 'alpha', b: 'bravo' }\n * @example\n * extract(\n *   { a: 'alpha', b: 'bravo', c: 'charlie' },\n *   key => key === 'a' || key === 'b'\n * ) // => { a: 'alpha', b: 'bravo' }\n */\nexport const extract = (object, keys, options={}) => {\n  let matcher;\n  let extract = { };\n  let actions = { delete: false, ...options };\n\n  if (isFunction(keys)) {\n    matcher = keys;\n  }\n  else if (keys instanceof RegExp) {\n    matcher = key => keys.test(key);\n  }\n  else if (isObject(keys)) {\n    matcher = key => keys[key];\n  }\n  else if (isArray(keys) || isString(keys)) {\n    const keysHash = splitHash(keys);\n    matcher = key => keysHash[key];\n  }\n  else {\n    fail(\"Invalid specification for extract(): \" + keys);\n  }\n  Object.keys(object).map(\n    key => {\n      if (matcher(key)) {\n        let value = object[key];\n        if (actions.delete) {\n          delete object[key];\n        }\n        if (actions.key) {\n          key = actions.key(key);\n        }\n        if (actions.value) {\n          value = actions.value(value);\n        }\n        extract[key] = value;\n      }\n    }\n  )\n  return extract;\n}\nexport const objSubset = extract;\n\n/**\n * Removes an item from an object and returns the value.\n * @param {Object} object - source object\n * @param {String} key - item to remove\n * @return {Any} - value of removed item\n * @example\n * remove(\n *   { a: 'alpha', b: 'bravo', c: 'charlie' },\n *   'a'\n * ) // => { a: 'alpha', b: 'bravo' }\n */\nexport const remove = (object, key) => {\n  const value = object[key];\n  delete object[key];\n  return value;\n}\n\n/**\n * Alias for `Object.keys`.\n * @param {Object} object - source object\n * @return {Array} - array of keys\n * @example\n * keys(\n *   { a: 'alpha', b: 'bravo', c: 'charlie' },\n * ) // => ['a', 'b', 'c']\n */\nexport const keys = Object.keys;\n\n/**\n * Alias for `Object.values`.\n * @param {Object} object - source object\n * @return {Array} - array of values\n * @example\n * values(\n *   { a: 'alpha', b: 'bravo', c: 'charlie' },\n * ) // => ['alpha', 'bravo', 'charlie']\n */\nexport const values = Object.values;\n\n/**\n * Alias for `Object.entries`.\n * @param {Object} object - source object\n * @return {Array} - array of `[key, value]` arrays\n * @example\n * entries(\n *   { a: 'alpha', b: 'bravo', c: 'charlie' },\n * ) // => [ ['a', 'alpha'], ['b', 'bravo'], ['c', 'charlie'] ]\n */\nexport const entries = Object.entries;\n\n\n",
    "static": true,
    "longname": "/Users/abw/js/badger-utils/src/utils/object.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "objMap",
    "memberof": "src/utils/object.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/object.js~objMap",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{objMap}",
    "description": "Applies a function to each of the values of an object and returns\na new object.",
    "examples": [
      "objMap(\n  { a: 'alpha', b: 'bravo' },\n  v => v.toUpperCase()\n)                        // returns { a: 'ALPHA', b: 'BRAVO' }"
    ],
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "source object"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "function to apply to each value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "new object with function applied to values"
    }
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "extract",
    "memberof": "src/utils/object.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/object.js~extract",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{extract}",
    "description": "Extracts a subset of items from an object.",
    "examples": [
      "extract(\n  { a: 'alpha', b: 'bravo', c: 'charlie' },\n  { a: true, b: true }\n) // => { a: 'alpha', b: 'bravo' }",
      "extract(\n  { a: 'alpha', b: 'bravo', c: 'charlie' },\n  ['a', 'b']\n) // => { a: 'alpha', b: 'bravo' }",
      "extract(\n  { a: 'alpha', b: 'bravo', c: 'charlie' },\n  'a b'\n) // => { a: 'alpha', b: 'bravo' }",
      "extract(\n  { a: 'alpha', b: 'bravo', c: 'charlie' },\n  /^[a|b]$/\n) // => { a: 'alpha', b: 'bravo' }",
      "extract(\n  { a: 'alpha', b: 'bravo', c: 'charlie' },\n  key => key === 'a' || key === 'b'\n) // => { a: 'alpha', b: 'bravo' }"
    ],
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "source object"
      },
      {
        "nullable": null,
        "types": [
          "Object",
          "Array",
          "String",
          "RegExp",
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": "keys to extract"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.delete",
        "description": "delete keys from source object"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "options.key",
        "description": "function to transform key"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "options.value",
        "description": "function to transform value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "new object with extracted values"
    }
  },
  {
    "__docId__": 82,
    "kind": "variable",
    "name": "objSubset",
    "memberof": "src/utils/object.js",
    "static": true,
    "longname": "src/utils/object.js~objSubset",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{objSubset}",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "remove",
    "memberof": "src/utils/object.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/object.js~remove",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{remove}",
    "description": "Removes an item from an object and returns the value.",
    "examples": [
      "remove(\n  { a: 'alpha', b: 'bravo', c: 'charlie' },\n  'a'\n) // => { a: 'alpha', b: 'bravo' }"
    ],
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "source object"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "item to remove"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Any"
      ],
      "spread": false,
      "description": "value of removed item"
    }
  },
  {
    "__docId__": 84,
    "kind": "variable",
    "name": "keys",
    "memberof": "src/utils/object.js",
    "static": true,
    "longname": "src/utils/object.js~keys",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{keys}",
    "description": "Alias for `Object.keys`.",
    "examples": [
      "keys(\n  { a: 'alpha', b: 'bravo', c: 'charlie' },\n) // => ['a', 'b', 'c']"
    ],
    "lineNumber": 130,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "source object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "array of keys"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "variable",
    "name": "values",
    "memberof": "src/utils/object.js",
    "static": true,
    "longname": "src/utils/object.js~values",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{values}",
    "description": "Alias for `Object.values`.",
    "examples": [
      "values(\n  { a: 'alpha', b: 'bravo', c: 'charlie' },\n) // => ['alpha', 'bravo', 'charlie']"
    ],
    "lineNumber": 141,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "source object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "array of values"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "variable",
    "name": "entries",
    "memberof": "src/utils/object.js",
    "static": true,
    "longname": "src/utils/object.js~entries",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{entries}",
    "description": "Alias for `Object.entries`.",
    "examples": [
      "entries(\n  { a: 'alpha', b: 'bravo', c: 'charlie' },\n) // => [ ['a', 'alpha'], ['b', 'bravo'], ['c', 'charlie'] ]"
    ],
    "lineNumber": 152,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "source object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "array of `[key, value]` arrays"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "file",
    "name": "src/utils/sort.js",
    "content": "import { isFunction, isString } from \"./assert.js\";\nimport { fail } from \"./error.js\";\nimport { splitList } from \"./text.js\";\n\n/**\n * Function to extract an integer field from an object.  Uses `parseInt()` to\n * coerce non-integer values (e.g. numbers in strings) to an integer.\n * @param {Object} obj - object containing data\n * @param {String} field - field to return as integer\n * @return {Integer} - integer value from object\n * @example\n * integerField({ a: \"10\" }, \"a\");     // 10\n */\nexport const integerField = (obj, field) =>\n  parseInt(obj[field]||0)\n\n/**\n * Function to extract a number field from an object.  Uses `parseFloat()` to\n * coerce non-number values (e.g. numbers in strings) to floats.\n * @param {Object} obj - object containing data\n * @param {String} field - field to return as float\n * @return {Float} - floating point number from object\n * @example\n * numberField({ pi: \"3.14\" }, \"pi\");     // 3.14\n */\nexport const numberField = (obj, field) =>\n  parseFloat(obj[field]||0)\n\n/**\n * Function to extract a string field from an object.  Uses `toString()` to\n * coerce non-string values (e.g. numbers) to strings.\n * @param {Object} obj - object containing data\n * @param {String} field - field to return as string\n * @return {Float} - string value from object\n * @example\n * numberField({ pi: 3.14 }, \"pi\");     // \"3.14\"\n */\nexport const stringField = (obj, field) =>\n  (obj[field]||'').toString()\n\n/**\n * Sort function generator for sorting objects by an integer field.\n * Takes a single field name and returns a sort function which will sort\n * objects by that field.\n * @param {String} field - field to return as string\n * @return {Function} - sort function to sort objects by the named integer field\n * @example\n * const people = [\n *   { name: \"Fred\",   age: 18 },\n *   { name: \"Shaggy\", age: 17 },\n *   { name: \"Daphne\", age: 16 },\n *   { name: \"Velma\",  age: 15 },\n * ];\n * const sortByAge = integerSort('age');\n * const sorted = people.sort(sortByAge); // Velma, Daphne, Shaggy, Fred\n */\nexport const integerSort = field => (a, b) => {\n  return integerField(a, field) - integerField(b, field);\n}\n\n/**\n * Sort function generator for sorting objects by a number field.\n * Takes a single field name and returns a sort function which will sort\n * objects by that field.\n * @param {String} field - field to return as string\n * @return {Function} - sort function to sort objects by the named number field\n * @example\n * const constants = [\n *   { name: \"pi\",   value: 3.14  },\n *   { name: \"e\",    value: 2.718 },\n *   { name: \"phi\",  value: 1.618 },\n * ];\n * const sortByValue = numberSort('value');\n * const sorted = constants.sort(sortByValue); // phi, e, pi\n */\nexport const numberSort = field => (a, b) => {\n  return numberField(a, field) - numberField(b, field);\n}\n\n/**\n * Sort function generator for sorting objects by a string field.\n * Takes a single field name and returns a sort function which will sort\n * objects by that field.\n * @param {String} field - field to return as string\n * @return {Function} - sort function to sort objects by the named string field\n * @example\n * const constants = [\n *   { name: \"pi\",   value: 3.14  },\n *   { name: \"e\",    value: 2.718 },\n *   { name: \"phi\",  value: 1.618 },\n * ];\n * const sortByName = stringSort('name');\n * const sorted = constants.sort(sortByName); // e, phi, pi\n */\nexport const stringSort = field => (a, b) => {\n  let c = stringField(a, field).toLowerCase();\n  let d = stringField(b, field).toLowerCase();\n  return c > d ? 1 : d > c ? -1 : 0;\n}\n\n/**\n * Lookup table mapping sort types to their functions.\n */\nexport const sortTypes = {\n  num:      numberSort,\n  int:      integerSort,\n  str:      stringSort,\n  number:   numberSort,\n  integer:  integerSort,\n  string:   stringSort,\n};\n\n/**\n * Do-nothing function provided for completeness.  It expects to be passed a sort\n * function that, by default, sorts in ascending order and it simply returns that\n * function unmodified.\n * @param {Function} fn - sort function\n * @return {Function} - the same sort function\n * @example\n * const sortByName = stringSort('name');\n * const sortByNameAsc = ascendingOrder(sortByName);\n */\nexport const ascendingOrder  = fn => fn\n\n/**\n * Inverting function that converts a sort function that sorts in ascending order to\n * one that sorts in descending order.  It does this by swapping the `a` and `b`\n * arguments passed to the function.\n * @param {Function} fn - function to sort in ascending order\n * @return {Function} - wrapper around the function to sort in descending order\n * @example\n * const sortByName = stringSort('name');\n * const sortByNameDesc = descendingOrder(sortByName);\n */\nexport const descendingOrder = fn => (a, b) => fn(b, a)\n\n/**\n * Lookup table mapping sort orders to their functions.\n */\nexport const sortOrders = {\n  asc:        ascendingOrder,\n  desc:       descendingOrder,\n  ascending:  ascendingOrder,\n  descending: descendingOrder,\n};\n\n\n/**\n * Sort function generator for sorting objects by multiple fields.\n * The specification can be either an array of sort functions, or be\n * specification used to construct those functions.  The specification\n * should be a whitespace delimited string in which each\n * component is the field name, optional data type and optional sort order,\n * each separated by a colon.\n * In the simple case, the data type is assumed be be `string` and the sort\n * order defaults to `asc`.  e.g. `surname forename` is the short form of\n * `surname:string:asc forename:string:asc`.  The data type can be one of\n * `string` (default), `integer` or `number` and the sort order can be `asc`\n * (default) for ascending order or `desc` for descending.\n * Returns a function which sorts an array of object by those fields.\n * @param {String} spec - sort specification\n * @return {Function} - sort function to sort objects by the named string field\n * @example\n * const people = [\n *   { forename: \"John\", surname: \"Smith\", age: 28 },\n *   { forename: \"Jack\", surname: \"Smith\", age: 30 },\n *   { forename: \"John\", surname: \"Smith\", age: 25 },\n *   { forename: \"John\", surname: \"Jones\", age: 32 },\n * ];\n * const sortByNameAndAge = multiSort('surname forename age:integer:desc');\n * const sorted = people.sort(sortByNameAndAge); // John Jones 32, Jack Smith 30, John Smith 28, John Smith 25\n */\nexport const multiSort = spec => {\n  const sorts = splitList(spec);\n  const funcs = sorts.map(\n    sort => {\n      if (isFunction(sort)) {\n        return sort;\n      }\n      else if (isString(sort)) {\n        const match = sort.match(/^(\\w+)(?::(\\w+))?(?::(\\w+))?$/)\n          || fail(`Invalid sort field: ${sort}`);\n        const sorter = sortTypes[match[2] || 'string']\n          || fail(`Invalid sort type \"${match[2]}\" in sort field: ${sort}`);\n        const order = sortOrders[match[3] || 'asc']\n          || fail(`Invalid sort order \"${match[3]}\" in sort field: ${sort}`);\n        return order(sorter(match[1]));\n      }\n      else {\n        fail(`Invalid sort field: ${sort}`);\n      }\n    }\n  );\n  return (a, b) => {\n    for (let i = 0; i < funcs.length; i++) {\n      const sortFunc = funcs[i];\n      const cmp = sortFunc(a, b);\n      if (cmp !== 0) {\n        return cmp;\n      }\n    }\n    return 0;\n  }\n}",
    "static": true,
    "longname": "/Users/abw/js/badger-utils/src/utils/sort.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 88,
    "kind": "function",
    "name": "integerField",
    "memberof": "src/utils/sort.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/sort.js~integerField",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{integerField}",
    "description": "Function to extract an integer field from an object.  Uses `parseInt()` to\ncoerce non-integer values (e.g. numbers in strings) to an integer.",
    "examples": [
      "integerField({ a: \"10\" }, \"a\");     // 10"
    ],
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "object containing data"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "field to return as integer"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Integer"
      ],
      "spread": false,
      "description": "integer value from object"
    }
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "numberField",
    "memberof": "src/utils/sort.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/sort.js~numberField",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{numberField}",
    "description": "Function to extract a number field from an object.  Uses `parseFloat()` to\ncoerce non-number values (e.g. numbers in strings) to floats.",
    "examples": [
      "numberField({ pi: \"3.14\" }, \"pi\");     // 3.14"
    ],
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "object containing data"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "field to return as float"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Float"
      ],
      "spread": false,
      "description": "floating point number from object"
    }
  },
  {
    "__docId__": 90,
    "kind": "function",
    "name": "stringField",
    "memberof": "src/utils/sort.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/sort.js~stringField",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{stringField}",
    "description": "Function to extract a string field from an object.  Uses `toString()` to\ncoerce non-string values (e.g. numbers) to strings.",
    "examples": [
      "numberField({ pi: 3.14 }, \"pi\");     // \"3.14\""
    ],
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "object containing data"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "field to return as string"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Float"
      ],
      "spread": false,
      "description": "string value from object"
    }
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "integerSort",
    "memberof": "src/utils/sort.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/sort.js~integerSort",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{integerSort}",
    "description": "Sort function generator for sorting objects by an integer field.\nTakes a single field name and returns a sort function which will sort\nobjects by that field.",
    "examples": [
      "const people = [\n  { name: \"Fred\",   age: 18 },\n  { name: \"Shaggy\", age: 17 },\n  { name: \"Daphne\", age: 16 },\n  { name: \"Velma\",  age: 15 },\n];\nconst sortByAge = integerSort('age');\nconst sorted = people.sort(sortByAge); // Velma, Daphne, Shaggy, Fred"
    ],
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "field to return as string"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "sort function to sort objects by the named integer field"
    }
  },
  {
    "__docId__": 92,
    "kind": "function",
    "name": "numberSort",
    "memberof": "src/utils/sort.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/sort.js~numberSort",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{numberSort}",
    "description": "Sort function generator for sorting objects by a number field.\nTakes a single field name and returns a sort function which will sort\nobjects by that field.",
    "examples": [
      "const constants = [\n  { name: \"pi\",   value: 3.14  },\n  { name: \"e\",    value: 2.718 },\n  { name: \"phi\",  value: 1.618 },\n];\nconst sortByValue = numberSort('value');\nconst sorted = constants.sort(sortByValue); // phi, e, pi"
    ],
    "lineNumber": 76,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "field to return as string"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "sort function to sort objects by the named number field"
    }
  },
  {
    "__docId__": 93,
    "kind": "function",
    "name": "stringSort",
    "memberof": "src/utils/sort.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/sort.js~stringSort",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{stringSort}",
    "description": "Sort function generator for sorting objects by a string field.\nTakes a single field name and returns a sort function which will sort\nobjects by that field.",
    "examples": [
      "const constants = [\n  { name: \"pi\",   value: 3.14  },\n  { name: \"e\",    value: 2.718 },\n  { name: \"phi\",  value: 1.618 },\n];\nconst sortByName = stringSort('name');\nconst sorted = constants.sort(sortByName); // e, phi, pi"
    ],
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "field to return as string"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "sort function to sort objects by the named string field"
    }
  },
  {
    "__docId__": 94,
    "kind": "variable",
    "name": "sortTypes",
    "memberof": "src/utils/sort.js",
    "static": true,
    "longname": "src/utils/sort.js~sortTypes",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{sortTypes}",
    "description": "Lookup table mapping sort types to their functions.",
    "lineNumber": 104,
    "type": {
      "types": [
        "{\"num\": *, \"int\": *, \"str\": *, \"number\": *, \"integer\": *, \"string\": *}"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "function",
    "name": "ascendingOrder",
    "memberof": "src/utils/sort.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/sort.js~ascendingOrder",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{ascendingOrder}",
    "description": "Do-nothing function provided for completeness.  It expects to be passed a sort\nfunction that, by default, sorts in ascending order and it simply returns that\nfunction unmodified.",
    "examples": [
      "const sortByName = stringSort('name');\nconst sortByNameAsc = ascendingOrder(sortByName);"
    ],
    "lineNumber": 123,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "sort function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "the same sort function"
    }
  },
  {
    "__docId__": 96,
    "kind": "function",
    "name": "descendingOrder",
    "memberof": "src/utils/sort.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/sort.js~descendingOrder",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{descendingOrder}",
    "description": "Inverting function that converts a sort function that sorts in ascending order to\none that sorts in descending order.  It does this by swapping the `a` and `b`\narguments passed to the function.",
    "examples": [
      "const sortByName = stringSort('name');\nconst sortByNameDesc = descendingOrder(sortByName);"
    ],
    "lineNumber": 135,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "function to sort in ascending order"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "wrapper around the function to sort in descending order"
    }
  },
  {
    "__docId__": 97,
    "kind": "variable",
    "name": "sortOrders",
    "memberof": "src/utils/sort.js",
    "static": true,
    "longname": "src/utils/sort.js~sortOrders",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{sortOrders}",
    "description": "Lookup table mapping sort orders to their functions.",
    "lineNumber": 140,
    "type": {
      "types": [
        "{\"asc\": *, \"desc\": *, \"ascending\": *, \"descending\": *}"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "function",
    "name": "multiSort",
    "memberof": "src/utils/sort.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/sort.js~multiSort",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{multiSort}",
    "description": "Sort function generator for sorting objects by multiple fields.\nThe specification can be either an array of sort functions, or be\nspecification used to construct those functions.  The specification\nshould be a whitespace delimited string in which each\ncomponent is the field name, optional data type and optional sort order,\neach separated by a colon.\nIn the simple case, the data type is assumed be be `string` and the sort\norder defaults to `asc`.  e.g. `surname forename` is the short form of\n`surname:string:asc forename:string:asc`.  The data type can be one of\n`string` (default), `integer` or `number` and the sort order can be `asc`\n(default) for ascending order or `desc` for descending.\nReturns a function which sorts an array of object by those fields.",
    "examples": [
      "const people = [\n  { forename: \"John\", surname: \"Smith\", age: 28 },\n  { forename: \"Jack\", surname: \"Smith\", age: 30 },\n  { forename: \"John\", surname: \"Smith\", age: 25 },\n  { forename: \"John\", surname: \"Jones\", age: 32 },\n];\nconst sortByNameAndAge = multiSort('surname forename age:integer:desc');\nconst sorted = people.sort(sortByNameAndAge); // John Jones 32, Jack Smith 30, John Smith 28, John Smith 25"
    ],
    "lineNumber": 173,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "spec",
        "description": "sort specification"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "sort function to sort objects by the named string field"
    }
  },
  {
    "__docId__": 99,
    "kind": "file",
    "name": "src/utils/text.js",
    "content": "import { isString, isArray, noValue, isObject, isFunction, hasValue } from \"./assert.js\";\nimport { commas } from \"./numbers.js\";\n\n/**\n * Split a comma/whitespace delimited string into an Array\n * @param {String} value - string to split\n * @return {Array} array of split strings\n * @example\n * const strings = splitList('one two three')\n * @example\n * const strings = splitList('one,two,three')\n * @example\n * const strings = splitList('one, two, three')\n */\nexport function splitList(value) {\n  if (noValue(value)) {\n    return [ ];\n  }\n  else if (isString(value)) {\n    return value.length\n      ? value.split(/,\\s*|\\s+/)\n      : [ ]\n  }\n  else if (isArray(value)) {\n    return value;\n  }\n  return [value];\n}\n\n\n/**\n * Split a comma/whitespace delimited string or Array into a hash object\n * @param {String} value - string to split\n * @param {Boolean|String|Number|Function} [set=true] - value to set for each key\n * @param {Object} [hash={}] - object to set keys in\n * @return {Object} hash object mapping keys to values\n * @example\n * const items = splitHash('one two')  // { one: true, two: true }\n * @example\n * const items = splitList('one two', 1)  // { one: 1, two: 1 }\n * @example\n * const items = splitList('one two', i => i)  // { one: 'one', two: 'two' }\n */\nexport function splitHash(value, set=true, hash={ }) {\n  // if it's already a hash object then return it unchanged\n  if (isObject(value)) {\n    return value;\n  }\n  // split a string into an array (or leave an array unchanged)\n  const items = splitList(value);\n\n  return items.reduce(\n    (result, key) => {\n      result[key] = isFunction(set)\n        ? set(key)\n        : set;\n      return result\n    },\n    hash\n  );\n}\n\n\n/**\n * Split a string into an Array of lines.\n * @param {String} text - string to split\n * @return {Array} array of lines\n*/\nexport function splitLines(text) {\n  if (! isString(text) || text.length === 0) {\n    return [ ];\n  }\n  var lines = text.split(/\\s*\\n+\\s*/).filter(\n    function(item) { return item.length > 0 }\n  );\n  return lines;\n}\n\n/**\n * Join an Array into a single string\n * @param {Array} array - array to join\n * @param {String} [joint=' '] - delimiter to join strings\n * @param {String} [lastJoint=joint] - delimiter for final item\n * @return {String} joined string\n * @example\n * joinList(['one', 'two', 'three']);   // one two three\n * @example\n * joinList(['one', 'two', 'three'], ', ');   // one, two, three\n * @example\n * joinList(['one', 'two', 'three'], ', ', ' and ');   // one, two and three\n */\nexport function joinList(array, joint=' ', lastJoint=joint) {\n  let copy = [...array];\n  const last = copy.pop();\n  return copy.length\n    ? [copy.join(joint), last].join(lastJoint)\n    : last;\n}\n\n/**\n * Join an Array into a single string using commas for delimiters and ` and ` for the final item\n * @param {Array} array - array to join\n * @param {String} [joint=', '] - delimiter to join strings\n * @param {String} [lastJoint=' and '] - delimiter for final item\n * @return {String} joined string\n * @example\n * joinListAnd(['one', 'two', 'three']);   // one, two and three\n */\nexport function joinListAnd(array, joint=', ', lastJoint=' and ') {\n  return joinList(array, joint, lastJoint);\n}\n\n/**\n * Join an Array into a single string using commas for delimiters and ` or ` for the final item\n * @param {Array} array - array to join\n * @param {String} [joint=', '] - delimiter to join strings\n * @param {String} [lastJoint=' or '] - delimiter for final item\n * @return {String} joined string\n * @example\n * joinListOr(['one', 'two', 'three']);   // one, two or three\n */\nexport function joinListOr(array, joint=', ', lastJoint=' or ') {\n  return joinList(array, joint, lastJoint);\n}\n\n/**\n * Capitalise a string by converting the first character to upper case and other characters to lower case\n * @param {String} word - word to capitalise\n * @return {String} capitalised string\n * @example\n * capitalise('badger');   // Badger\n * @example\n * capitalise('BADGER');   // Badger\n */\nexport function capitalise(word) {\n  return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n}\n\n/**\n * Capitalise all words in a string by converting the first character of each word to upper case\n * @param {String} string - words to capitalise\n * @return {String} capitalised string\n * @example\n * capitaliseWords('badger fun');   // Badger Fun\n * @example\n * capitaliseWords('BADGER FUN');   // Badger Fun\n */\nexport function capitaliseWords(string) {\n  return string.replace(\n    // /(?:^|\\s)\\S/g,\n    /(\\w+)/g,\n    capitalise\n  );\n}\n\n/**\n * Convert a snake case string to studly caps\n * @param {String} snake - word to capitalise\n * @return {String} capitalised string\n * @example\n * snakeToStudly('happy_badger_dance');   // HappyBadgerDance\n * @example\n * snakeToStudly('happy_badger/dance');   // HappyBadger/Dance\n */\nexport function snakeToStudly(snake) {\n  return snake.split('/').map(\n    // each segment can be like foo_bar which we convert to FooBar\n    segment => segment.split('_').map(capitalise).join('')\n  ).join('/');\n}\n\n/**\n * Convert a snake case string to camel case\n * @param {String} snake - word to capitalise\n * @return {String} capitalised string\n * @example\n * snakeToCamel('happy_badger_dance');   // happyBadgerDance\n * @example\n * snakeToCamel('happy_badger/dance');   // happyBadger/dance\n */\nexport function snakeToCamel(snake) {\n  return snake.split('/').map(\n    // each segment can be like foo_bar which we convert to fooBar\n    segment => segment.split('_').map((i, n) => n ? capitalise(i) : i).join('')\n  ).join('/');\n}\n\n/**\n * A very primitive function to pluralise the singular form of a words.  It only\n * works on words with standard endings and plural forms, because pluralising\n * words is notoriously difficult.\n * @param {String} singular - word to pluralise\n * @param {Object} [specialCases={}] - special cases\n * @return {String} plural form\n * @example\n * plural('box');     // boxes\n * @example\n * plural('doggy');   // doggies\n * @example\n * plural('badger');  // badgers\n * @example\n * plural('woman');   // womans\n */\nexport function plural(singular, specialCases={}) {\n  const special = specialCases[singular];\n  if (hasValue(special)) {\n    return special\n  }\n  let found;\n\n  if (singular.match(/(ss?|sh|ch|x)$/)) {\n    // e.g. grass/grasses, lash/lashes, watch/watches, box, boxes\n    return singular + 'es';\n  }\n  else if ((found = singular.match(/(.*?[^aeiou])y$/))) {\n    // doggy/doggies\n    return found[1] + 'ies';\n  }\n  else if (singular.match(/([^s\\d\\W])$/)) {\n    // cat/cats\n    return singular + 's';\n  }\n  return singular;\n}\n\n/**\n * A very primitive function to return the singular form of a plural noun.  It\n * only works on words with standard endings and plural forms that, using the\n * reverse algorithm of {@link plural()}.\n * @param {String} plural - plural form\n * @param {Object} [specialCases={}] - special cases\n * @return {String} singular form\n * @example\n * singular('boxes');     // box\n * @example\n * singular('doggies');   // doggy\n * @example\n * singular('badgers');   // badger\n * @example\n * singular('women');     // women - FAIL!\n */\nexport function singular(plural, specialCases={}) {\n  const special = specialCases[plural];\n  if (hasValue(special)) {\n    return special\n  }\n\n  if (plural.match(/(ss|sh|ch|x)es$/)) {\n    return plural.replace(/es$/, '')\n  }\n  else if (plural.match(/([^aeiou])ies$/)) {\n    return plural.replace(/ies$/, 'y');\n  }\n  else if (plural.match(/([^s\\d\\W])s$/)) {\n    return plural.replace(/s$/, '');\n  }\n  return plural;\n}\n\n/**\n * Utility function to inflect a string passed as the second argument to the singular/plural\n * form based on the number passed as the first argument.  Uses the {@link plural()} function\n * which only works on words with standard pluralisations.  The third argument can be provided\n * as the plural form where necessary.  The optional 4th argument can be used to provide a different\n * word for the case where n is 0.  The default is \"no\", e.g. \"no badgers\" when n is 0.\n * @param {Integer} n - number of items\n * @param {String} singularForm - singular form\n * @param {String} [pluralForm] - optional plural form\n * @param {String} [no='no'] - optional word to use when `n` is 0\n * @example\n * inflect(0, 'cat')     // no cats\n * @example\n * inflect(1, 'cat')     // 1 cat\n * @example\n * inflect(2, 'cat')     // 2 cats\n * @example\n * inflect(0, 'child', 'children')     // no children\n * @example\n * inflect(1, 'child', 'children')     // 1 child\n * @example\n * inflect(2, 'child', 'children')     // 2 children\n * @example\n * inflect(0, 'black', 'black', 'none, none more')     // none, none more black\n */\nexport function inflect(n, singularForm, pluralForm, no='no') {\n  return (n ? commas(n) : no)\n    + ' '\n    + (n === 1 ? singularForm : (pluralForm || plural(singularForm)));\n}\n\n/**\n * Wrapper around {@link inflect()} which uses the word \"No\" instead of \"no\" for the\n * zero case, i.e. Inflect() is the capitalized form of inflect()\n * @param {Integer} n - number of items\n * @param {String} singular - singular form\n * @param {String} [plural] - optional plural form\n * @param {String} [no='No'] - optional word to use when `n` is 0\n */\nexport function Inflect(n, singular, plural, no='No') {\n  return inflect(n, singular, plural, no);\n}\n\n\n\n// for the yanks\nexport const capitalize = capitalise;\nexport const capitalizeWords = capitaliseWords;\nexport const pluralise = plural;\nexport const pluralize = plural;\n\n",
    "static": true,
    "longname": "/Users/abw/js/badger-utils/src/utils/text.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 100,
    "kind": "function",
    "name": "splitList",
    "memberof": "src/utils/text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/text.js~splitList",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{splitList}",
    "description": "Split a comma/whitespace delimited string into an Array",
    "examples": [
      "const strings = splitList('one two three')",
      "const strings = splitList('one,two,three')",
      "const strings = splitList('one, two, three')"
    ],
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "string to split"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "array of split strings"
    }
  },
  {
    "__docId__": 101,
    "kind": "function",
    "name": "splitHash",
    "memberof": "src/utils/text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/text.js~splitHash",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{splitHash}",
    "description": "Split a comma/whitespace delimited string or Array into a hash object",
    "examples": [
      "const items = splitHash('one two')  // { one: true, two: true }",
      "const items = splitList('one two', 1)  // { one: 1, two: 1 }",
      "const items = splitList('one two', i => i)  // { one: 'one', two: 'two' }"
    ],
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "string to split"
      },
      {
        "nullable": null,
        "types": [
          "Boolean",
          "String",
          "Number",
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "set",
        "description": "value to set for each key"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "hash",
        "description": "object to set keys in"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "hash object mapping keys to values"
    }
  },
  {
    "__docId__": 102,
    "kind": "function",
    "name": "splitLines",
    "memberof": "src/utils/text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/text.js~splitLines",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{splitLines}",
    "description": "Split a string into an Array of lines.",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "string to split"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "array of lines"
    }
  },
  {
    "__docId__": 103,
    "kind": "function",
    "name": "joinList",
    "memberof": "src/utils/text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/text.js~joinList",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{joinList}",
    "description": "Join an Array into a single string",
    "examples": [
      "joinList(['one', 'two', 'three']);   // one two three",
      "joinList(['one', 'two', 'three'], ', ');   // one, two, three",
      "joinList(['one', 'two', 'three'], ', ', ' and ');   // one, two and three"
    ],
    "lineNumber": 92,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": "array to join"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "' '",
        "defaultRaw": "' '",
        "name": "joint",
        "description": "delimiter to join strings"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "joint",
        "defaultRaw": "joint",
        "name": "lastJoint",
        "description": "delimiter for final item"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "joined string"
    }
  },
  {
    "__docId__": 104,
    "kind": "function",
    "name": "joinListAnd",
    "memberof": "src/utils/text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/text.js~joinListAnd",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{joinListAnd}",
    "description": "Join an Array into a single string using commas for delimiters and ` and ` for the final item",
    "examples": [
      "joinListAnd(['one', 'two', 'three']);   // one, two and three"
    ],
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": "array to join"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "', '",
        "defaultRaw": "', '",
        "name": "joint",
        "description": "delimiter to join strings"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "' and '",
        "defaultRaw": "' and '",
        "name": "lastJoint",
        "description": "delimiter for final item"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "joined string"
    }
  },
  {
    "__docId__": 105,
    "kind": "function",
    "name": "joinListOr",
    "memberof": "src/utils/text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/text.js~joinListOr",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{joinListOr}",
    "description": "Join an Array into a single string using commas for delimiters and ` or ` for the final item",
    "examples": [
      "joinListOr(['one', 'two', 'three']);   // one, two or three"
    ],
    "lineNumber": 122,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": "array to join"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "', '",
        "defaultRaw": "', '",
        "name": "joint",
        "description": "delimiter to join strings"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "' or '",
        "defaultRaw": "' or '",
        "name": "lastJoint",
        "description": "delimiter for final item"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "joined string"
    }
  },
  {
    "__docId__": 106,
    "kind": "function",
    "name": "capitalise",
    "memberof": "src/utils/text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/text.js~capitalise",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{capitalise}",
    "description": "Capitalise a string by converting the first character to upper case and other characters to lower case",
    "examples": [
      "capitalise('badger');   // Badger",
      "capitalise('BADGER');   // Badger"
    ],
    "lineNumber": 135,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "word",
        "description": "word to capitalise"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "capitalised string"
    }
  },
  {
    "__docId__": 107,
    "kind": "function",
    "name": "capitaliseWords",
    "memberof": "src/utils/text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/text.js~capitaliseWords",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{capitaliseWords}",
    "description": "Capitalise all words in a string by converting the first character of each word to upper case",
    "examples": [
      "capitaliseWords('badger fun');   // Badger Fun",
      "capitaliseWords('BADGER FUN');   // Badger Fun"
    ],
    "lineNumber": 148,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "string",
        "description": "words to capitalise"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "capitalised string"
    }
  },
  {
    "__docId__": 108,
    "kind": "function",
    "name": "snakeToStudly",
    "memberof": "src/utils/text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/text.js~snakeToStudly",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{snakeToStudly}",
    "description": "Convert a snake case string to studly caps",
    "examples": [
      "snakeToStudly('happy_badger_dance');   // HappyBadgerDance",
      "snakeToStudly('happy_badger/dance');   // HappyBadger/Dance"
    ],
    "lineNumber": 165,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "snake",
        "description": "word to capitalise"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "capitalised string"
    }
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "snakeToCamel",
    "memberof": "src/utils/text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/text.js~snakeToCamel",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{snakeToCamel}",
    "description": "Convert a snake case string to camel case",
    "examples": [
      "snakeToCamel('happy_badger_dance');   // happyBadgerDance",
      "snakeToCamel('happy_badger/dance');   // happyBadger/dance"
    ],
    "lineNumber": 181,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "snake",
        "description": "word to capitalise"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "capitalised string"
    }
  },
  {
    "__docId__": 110,
    "kind": "function",
    "name": "plural",
    "memberof": "src/utils/text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/text.js~plural",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{plural}",
    "description": "A very primitive function to pluralise the singular form of a words.  It only\nworks on words with standard endings and plural forms, because pluralising\nwords is notoriously difficult.",
    "examples": [
      "plural('box');     // boxes",
      "plural('doggy');   // doggies",
      "plural('badger');  // badgers",
      "plural('woman');   // womans"
    ],
    "lineNumber": 204,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "singular",
        "description": "word to pluralise"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "specialCases",
        "description": "special cases"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "plural form"
    }
  },
  {
    "__docId__": 111,
    "kind": "function",
    "name": "singular",
    "memberof": "src/utils/text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/text.js~singular",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{singular}",
    "description": "A very primitive function to return the singular form of a plural noun.  It\nonly works on words with standard endings and plural forms that, using the\nreverse algorithm of {@link plural()}.",
    "examples": [
      "singular('boxes');     // box",
      "singular('doggies');   // doggy",
      "singular('badgers');   // badger",
      "singular('women');     // women - FAIL!"
    ],
    "lineNumber": 242,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "plural",
        "description": "plural form"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "specialCases",
        "description": "special cases"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "singular form"
    }
  },
  {
    "__docId__": 112,
    "kind": "function",
    "name": "inflect",
    "memberof": "src/utils/text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/text.js~inflect",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{inflect}",
    "description": "Utility function to inflect a string passed as the second argument to the singular/plural\nform based on the number passed as the first argument.  Uses the {@link plural()} function\nwhich only works on words with standard pluralisations.  The third argument can be provided\nas the plural form where necessary.  The optional 4th argument can be used to provide a different\nword for the case where n is 0.  The default is \"no\", e.g. \"no badgers\" when n is 0.",
    "examples": [
      "inflect(0, 'cat')     // no cats",
      "inflect(1, 'cat')     // 1 cat",
      "inflect(2, 'cat')     // 2 cats",
      "inflect(0, 'child', 'children')     // no children",
      "inflect(1, 'child', 'children')     // 1 child",
      "inflect(2, 'child', 'children')     // 2 children",
      "inflect(0, 'black', 'black', 'none, none more')     // none, none more black"
    ],
    "lineNumber": 285,
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "number of items"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "singularForm",
        "description": "singular form"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "pluralForm",
        "description": "optional plural form"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'no'",
        "defaultRaw": "'no'",
        "name": "no",
        "description": "optional word to use when `n` is 0"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "function",
    "name": "Inflect",
    "memberof": "src/utils/text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/text.js~Inflect",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{Inflect}",
    "description": "Wrapper around {@link inflect()} which uses the word \"No\" instead of \"no\" for the\nzero case, i.e. Inflect() is the capitalized form of inflect()",
    "lineNumber": 299,
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "number of items"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "singular",
        "description": "singular form"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "plural",
        "description": "optional plural form"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'No'",
        "defaultRaw": "'No'",
        "name": "no",
        "description": "optional word to use when `n` is 0"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "variable",
    "name": "capitalize",
    "memberof": "src/utils/text.js",
    "static": true,
    "longname": "src/utils/text.js~capitalize",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{capitalize}",
    "description": null,
    "lineNumber": 306,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "variable",
    "name": "capitalizeWords",
    "memberof": "src/utils/text.js",
    "static": true,
    "longname": "src/utils/text.js~capitalizeWords",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{capitalizeWords}",
    "description": null,
    "lineNumber": 307,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "variable",
    "name": "pluralise",
    "memberof": "src/utils/text.js",
    "static": true,
    "longname": "src/utils/text.js~pluralise",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{pluralise}",
    "description": null,
    "lineNumber": 308,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "variable",
    "name": "pluralize",
    "memberof": "src/utils/text.js",
    "static": true,
    "longname": "src/utils/text.js~pluralize",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{pluralize}",
    "description": null,
    "lineNumber": 309,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "file",
    "name": "src/utils/time.js",
    "content": "/**\n * Function to generate a debouncer function which will call the wrapped function after\n * a timeout.  If the debouncer function is called again before the wrapped function has\n * been called then the debounced will reset the timer.\n * @param {Function} func - function to be debounced\n * @param {Integer} [timeout=300] - timeout in milliseconds\n * @return {Function} debounced function\n */\nexport function debounce(func, timeout=300) {\n  let timer;\n  return (...args) => {\n    clearTimeout(timer);\n    timer = setTimeout(\n      () => func.apply(this, args),\n      timeout\n    );\n  };\n}\n\n/**\n * Function which returns a Promise which will resolve after a delay.\n * @param {Integer} ms - delay in millseconds\n * @return {Promise} - promise which will resolve after the delay\n */\nexport function sleep(ms) {\n  return new Promise(r => setTimeout(r, ms))\n}\n",
    "static": true,
    "longname": "/Users/abw/js/badger-utils/src/utils/time.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "debounce",
    "memberof": "src/utils/time.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/time.js~debounce",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{debounce}",
    "description": "Function to generate a debouncer function which will call the wrapped function after\na timeout.  If the debouncer function is called again before the wrapped function has\nbeen called then the debounced will reset the timer.",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": "function to be debounced"
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "300",
        "defaultRaw": 300,
        "name": "timeout",
        "description": "timeout in milliseconds"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "debounced function"
    }
  },
  {
    "__docId__": 120,
    "kind": "function",
    "name": "sleep",
    "memberof": "src/utils/time.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/time.js~sleep",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{sleep}",
    "description": "Function which returns a Promise which will resolve after a delay.",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "ms",
        "description": "delay in millseconds"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "promise which will resolve after the delay"
    }
  },
  {
    "kind": "index",
    "content": "# badger-utils\n\nThis contains a number of Javascript utility functions that\nI tend to use in most of my Javascript projects.\n\nSome of these functions date back to long, long ago, before\nlibraries like [underscore](https://underscorejs.org/) and\n[lodash](https://lodash.com/) existed.  There probably isn't\nmuch in here that isn't already covered by those libraries.\n\nFor new projects it's probably best to start out using one\nof those if you don't mind the overhead.\n\n## Installation\n\nInstall `badger-utils` using your favourite package manager.\n\n### npm\n\n    npm install @abw/badger-utils\n\n### pnpm\n\n    pnpm add @abw/badger-utils\n\n### yarn\n\n    yarn add @abw/badger-utils\n\n## Documentation\n\nRead the [API documentation](https://abw.github.io/badger-utils/docs/) for further information\nabout the utility functions provided.\n\n## Author\n\nAndy Wardley <abw@wardley.org>",
    "longname": "/Users/abw/js/badger-utils/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@abw/badger-utils\",\n  \"version\": \"1.0.16\",\n  \"description\": \"Javascript utility modules\",\n  \"type\": \"module\",\n  \"main\": \"dist/badger-utils.cjs.js\",\n  \"module\": \"dist/badger-utils.esm.js\",\n  \"browser\": \"dist/badger-utils.umd.js\",\n  \"exports\": {\n    \".\": {\n      \"require\": \"./dist/badger-utils.cjs.js\",\n      \"import\": \"./dist/badger-utils.esm.js\"\n    }\n  },\n  \"author\": \"Andy Wardley\",\n  \"license\": \"MIT\",\n  \"files\": [\n    \"dist\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/abw/badger-utils.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/abw/badger-utils/issues\"\n  },\n  \"scripts\": {\n    \"build\": \"rollup -c\",\n    \"dev\": \"rollup -c -w\",\n    \"lint\": \"eslint 'src/**/*'\",\n    \"docs:build\": \"esdoc\",\n    \"docs:serve\": \"serve docs\",\n    \"test\": \"ava\",\n    \"pretest\": \"pnpm run build\"\n  },\n  \"keywords\": [\n    \"badger\",\n    \"utility\"\n  ],\n  \"devDependencies\": {\n    \"@itsjamie/esdoc-cli\": \"^0.5.0\",\n    \"@itsjamie/esdoc-core\": \"^0.5.0\",\n    \"@itsjamie/esdoc-importpath-plugin\": \"^0.5.0\",\n    \"@itsjamie/esdoc-inject-style-plugin\": \"^0.5.0\",\n    \"@itsjamie/esdoc-standard-plugin\": \"^0.5.0\",\n    \"@rollup/plugin-commonjs\": \"^11.0.1\",\n    \"@rollup/plugin-node-resolve\": \"^7.1.3\",\n    \"ava\": \"^4.3.0\",\n    \"eslint\": \"^8.20.0\",\n    \"rollup\": \"^2\",\n    \"rollup-plugin-terser\": \"^7.0.2\"\n  },\n  \"dependencies\": {\n  }\n}\n",
    "longname": "/Users/abw/js/badger-utils/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "content": "# badger-utils\n\n<img src=\"./images/badger2.svg\" width=\"300\"/>\n\nThis is the manual for the `badger-utils` Javascript module.\n\n* [Getting Started](manual/getting_started.html)\n* [Assertions](manual/assertions.html)\n* [Number Functions](manual/numbers.html)\n* [Text Functions](manual/text.html)\n* [Object Functions](manual/objects.html)\n* [Sorting Functions](manual/sort.html)\n* [Timing Functions](manual/timing.html)\n* [Error Functions](manual/errors.html)\n* [Miscellaneous Functions](manual/misc.html)\n\n# Author\n[Andy Wardley](https://github.com/abw)\n",
    "longname": "/Users/abw/js/badger-utils/manual/index.md",
    "name": "./manual/index.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-utils/manual/getting_started.md",
    "name": "./manual/getting_started.md",
    "content": "# Getting Started\n\n- [Installation](#installation)\n- [Basic Use](#basic-use)\n\n## Installation\n\nUse your favourite package manager to install the module\nfrom `@abw/badger-utils`.\n\n### npm\n\n    npm install @abw/badger-utils\n\n### pnpm\n\n    pnpm add @abw/badger-utils\n\n### yarn\n\n    yarn add @abw/badger-utils\n\n## Basic Use\n\nImport any of the function using ESM syntax.\n\n```js\nimport { isString, objMap } from '@abw/badger-utils'\n```\n\nOr via `require()` if you're still using Common JS format.\n\n```js\nconst { isString, ObjMap } = require('@abw/badger-utils')\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-utils/manual/assertions.md",
    "name": "./manual/assertions.md",
    "content": "# Assertions\n\n## isBoolean(value)\n\nDetermines if a value is a boolean. Returns `true` if the value is\n`true` or `false`.  Otherwise it returns false.\n\n```js\nisBoolean(true);         // true\nisBoolean(false);        // true\nisBoolean(1);            // false\nisBoolean(0);            // false\n```\n\nValues that can be coerced to boolean values (e.g. the numbers `0`\nand `1`) are NOT considered booleans and the function will return\n`false`.\n\n## isString(value)\n\nDetermines if a value is a string.  Returns Boolean `true` or `false`.\n\n```js\nisString('Hello World'); // true\nisString(42);            // false\n```\n\n## isNumber(value)\n\nDetermines if a value is a number.  Returns Boolean `true` or `false`.\n\n```js\nisNumber(42);      // true\nisNumber(42.43);   // true\nisNumber(\"42\");    // false\n```\n\n## isInteger(value)\n\nDetermines if a value is an integer.  Returns Boolean `true` or `false`.\n\n```js\nisInteger(42);      // true\nisInteger(42.0);    // true\nisInteger(42.43);   // false\nisInteger(\"42\");    // false\n```\n\nNote that numbers with decimal parts that are zero (e.g. `42.0`) are considered\nto be integers.\n\n## isFloat(value)\n\nDetermines if a value is a floating point number.  Returns Boolean `true` or `false`.\n\n```js\nisFloat(42);      // false\nisFloat(42.0);    // false\nisFloat(42.43);   // true\nisFloat(\"42\");    // false\n```\n\nNote that numbers with decimal parts that are zero (e.g. `42.0`) are considered\nto be integers and the function will return `false` in those cases.\n\n## isArray(value)\n\nDetermines if a value is an array.  Returns Boolean `true` or `false`.\n\n```js\nisArray([42, 43]);  // true\nisArray(\"42, 43\");  // false\n```\n\n## isFunction(value)\n\nDetermines if a value is a function.  Returns Boolean `true` or `false`.\n\n```js\nisFunction( a => a + 1 );     // true\nisFunction(\"badger badger\");  // false\n```\n\n## isObject(value)\n\nDetermines if a value is an object.\n\nJavascript's concept of an object is ambiguous because a number of\ndifferent data types are considered to be objects, including `Array`\nand `null`.  This function will return `false` for arrays and null\nvalues and only return `true` for values that are objects in the\nmore traditional sense: an instance of a class (e.g. `new Date()`)\nor a data structure created with curly braces (e.g. `{ b: 'badger' }`).\n\nReturns Boolean `true` or `false`.\n\n```js\nisObject(new Date());        // true\nisObject({ b: 'badger' });   // true\nisObject([10, 20]);          // false\nisObject(null);              // false\n```\n\n## isUndefined(value)\n\nDetermines if a value has the `undefined` value.  Returns Boolean `true` or `false`.\n\nNote that this does **not** include `null`.  Use [hasValue(value)](#hasValue) or\n[noValue(value)](#noValue) to test for a value being `undefined` or `null`.\n\n```js\nisUndefined(undefined); // true\nisUndefined(null);      // false\nisUndefined(0);         // false\n```\n\n## isNull(value)\n\nDetermines if a value has the `null` value.  Returns Boolean `true` or `false`.\n\nNote that this does **not** include `undefined` values.\nUse [hasValue(value)](#hasvalue-value-) or [noValue(value)](#novalue-value-) to test for a value\nbeing `undefined` or `null`.\n\n```js\nisNull(null);      // true\nisNull(undefined); // false\nisNull(0);         // false\n```\n\n## hasValue(value)\n\nDetermines if a value has a defined and non-null value.  Returns Boolean `true` or `false`.\n\nNote that this is subtly different from Javascript's idea of truth.  This function\nwill return `true` if the value is a boolean `false` or the number `0`.\n\n```js\nhasValue(0);         // true\nhasValue(false);     // true\nhasValue(null);      // false\nhasValue(undefined); // false\n```\n\n## noValue(value)\n\nDetermines if a value does not have a defined and non-null value.\nIt is the logical negation of [hasValue()](#hasvalue-value-)\nReturns Boolean `true` or `false`.\n\n```js\nnoValue(null);      // true\nnoValue(undefined); // true\nnoValue(0);         // true\nnoValue(false);     // true\n```\n\n## haveValue(...values)\n\nDetermines if all the values passed as arguments have defined and non-null value.\nReturns Boolean `true` or `false`.\n\n```js\nhaveValue(0, 1, 2);         // true\nhaveValue(0, 1, undefined); // false\n```\n\n## firstValue(...values)\n\nReturns the first argument that has a defined and non-null value.\n\n```js\nfirstValues(0, 1, 2);         // 0\nfirstValues(undefined, 1, 2); // 1\nfirstValues(null, 2, 3);      // 2\nfirstValues(false, 3, 4);     // false\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-utils/manual/numbers.md",
    "name": "./manual/numbers.md",
    "content": "# Numbers\n\nVarious utility functions for working with numbers.\n\n## range(from, to, step=1)\n\nReturns an array of sequential numbers from the starting value, `from`, up to\n**and including** to the end value, `to`.\n\n```js\nrange(1, 3);  // [1, 2, 3]\n```\n\nIt handles negative numbers correctly, including cases where the range is\ndecreasing in value.\n\n```js\nrange(-2, 2); // [-2, -1, 0, 1, 2]\nrange(2, -2); // [2, 1, 0, -1, -2]\n```\n\nAn optional third argument can be provided as a stepping value.\n\n```js\nrange(2, 8, 2);   // [2, 4, 6, 8]\nrange(-4, 4, 2);  // [-4, -2, 0, 2, 4]\nrange(4, -4, -2); // [4, 2, 0, -2, -4]\n```\n\nIt will also correctly handle the case where you are a numpty and\nprovide a step that has the wrong sign.\n\n```js\nrange(4, -4, -2); // [4, 2, 0, -2, -4]\nrange(4, -4, 2);  // [4, 2, 0, -2, -4]\n```\n\n## formatNumber(number, options)\n\nThis function is for formatting numbers.  It is implemented as a\nwrapper around the\n[Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) `format()` function.\n\nThe first argument is the number to format.  The second optional argument is\nan object containing configuration options.  These can include `locale` and\nany of the other options supported by [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat).\n\nIf no options are provided then it will format the number according to the default locale.\nFor my locale (`en-GB`), the convention is to use commas to separate thousands.\n\n```js\n// this works in my locale but might be different in yours\nformatNumber(12345); // 12,345\n```\n\nAn explicit locale can be provided as a configuration option.\n\n```js\nformatNumber(12345, { locale: 'en-GB'});    // 12,345\n```\n\nOther options include `style` and `currency`, e.g. for formatting a number\nas a currency.\n\n```js\nformatNumber(12345, { locale: 'en-GB', style: 'currency', currency: 'GBP' })\n  // => £12,345.00\n```\n\n## currency(number, options)\n\nThis is a wrapper around the [formatNumber()](#formatnumber-n--options-) function\nfor formatting currencies.\n\n```js\ncurrency(12345, { locale: 'en-GB', currency: 'GBP' }) // £12,345.00\ncurrency(12345, { locale: 'en-US', currency: 'USD' }) // $12,345.00\n```\n\n## commas(n)\n\nThis function will add commas as thousand separators in a number.\n\n```js\ncommas(12345); // 12,345\n```\n\nAn optional second argument can be provided to change the separator.\n\n```js\ncommas(12345, ' '); // 12 345\n```\n\nFor locale-specific number formatting it is recommended that you use\n[formatNumber()](#formatnumber-n--options-).\n\n## setNumberDefaults(defaults)\n\nThis function can be used to set the default options for various number\nformatting functions.\n\n```js\nsetNumberDefaults({\n  locale: 'en-US',    // default locale\n  currency: 'USD',    // default currency\n  thousands: ','      // default thousands separator\n});\n\n// defaults applied in various functions\nnumberFormat(12345) // 12,345\ncurrency(12345)     // $12,345.00\ncommas(12345)       // 12,345\n\n// defaults can be overridden when functions are called\ncurrency(12345, { locale: 'en-GB', currency: 'GBP' }) // £12,345.00\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-utils/manual/text.md",
    "name": "./manual/text.md",
    "content": "# Text\n\nVarious utility functions for working with text.\n\n## splitLines(text)\n\nThis function splits a text string into lines.  Any blank lines are ignored.\n\n```js\nsplitLines(\"foo\\nbar\\n\\n\\nbaz\")\n    // => [\"foo\", \"bar\", \"baz\"]\n```\n\n## splitList(value)\n\nFunction to split a string of words into an array.  Words can\nbe delimited by commas and/or spaces. If the argument is already\nan array then the array is returned unmodified.\n\n```js\nsplitList(\"foo bar baz\")    // [\"foo\", \"bar\", \"baz\"]\nsplitList(\"foo,bar,baz\")    // [\"foo\", \"bar\", \"baz\"]\nsplitList(\"foo, bar, baz\")  // [\"foo\", \"bar\", \"baz\"]\n```\n\n## splitHash(value, set=true, hash={})\n\nFunction to split a string of whitespace delimited words, or an array of\nwords, into an object which can be used as a hash table for quick lookups.\nThe input is first passed to the [splitList()](#splitlist-value-) function.\nIt returns an object where the keys are the words extracted from the input\nand the values are set to be `true`.\n\n```js\nsplitHash(\"foo bar baz\")    // { foo: true, bar: true, baz: true }\n```\n\nAn optional second argument can be passed to set the value to be used for\nthe hash table values.\n\n```js\nsplitHash(\"foo bar baz\", 1)    // { foo: 1, bar: 1, baz: 1 }\n```\n\nThis can be a function which will be passed the key and should return the\ncorresponding value.\n\n```js\nsplitHash(\"foo bar baz\", k => k)    // { foo: \"foo\", bar: \"bar\", baz: \"baz\" }\n```\n\nA third optional argument can be passed which is an object to populate with the\nresults.\n\n```js\nlet stuff = { foo: \"foo\" }\nsplitHash(\"bar baz\", k => k, stuff)    // { foo: \"foo\", bar: \"bar\", baz: \"baz\" }\n```\n\n## joinList(array, joint=' ', lastJoint=joint)\n\nFunction to join an array of strings into a single string.  The\ndefault delimiter is a single space.\n\n```js\njoinList([\"Tom\", \"Dick\", \"Harry\"])\n    // => \"Tom Dick Harry\"\n```\n\nA delimiter can be provided as a second argument.\n\n```js\njoinList([\"Tom\", \"Dick\", \"Harry\"], \", \")\n    // \"Tom, Dick, Harry\"\n```\n\nA final delimiter can be provided as a third argument\n\n```js\njoinList([\"Tom\", \"Dick\", \"Harry\"], \", \", \" and \")\n    // \"Tom, Dick and Harry\"\n```\n\n## joinListAnd(array, joint=', ', lastJoint=' and ')\n\nA wrapper around the [JoinList()](#joinlist-array--joint---39----39---lastjoint-joint-)\nfunction which defaults the `joint` to `', '` and the `lastJoint` to `' and '`\n\n```js\njoinListAnd([\"Tom\", \"Dick\", \"Harry\"])\n    // \"Tom, Dick and Harry\"\n```\n\n## joinListOr(array, joint=', ', lastJoint=' or ')\n\nA wrapper around the [JoinList()](#joinlist-array--joint---39----39---lastjoint-joint-)\nfunction which defaults the `joint` to `', '` and the `lastJoint` to `' or '`\n\n```js\njoinListAnd([\"Tom\", \"Dick\", \"Harry\"])\n    // \"Tom, Dick or Harry\"\n```\n\n## capitalise(word) / capitalize(word)\n\nThis function (provided with spellings in both British and American English)\ncapitalises a word.  The first character will be convert to upper case and\nthe remaining characters to lower case.\n\n```js\ncapitalise(\"badger\")    // => Badger\ncapitalise(\"BADGER\")    // => Badger\n```\n\n## capitaliseWords(string) / capitalizeWords(string)\n\nThis function (provided with spellings in both British and American English)\ncapitalises all words in a string.\n\n```js\ncapitalise(\"badger mushroom snake\")    // => Badger Mushroom Snake\ncapitalise(\"BADGER MUSHROOM SNAKE\")    // => Badger Mushroom Snake\n```\n\n## snakeToStudly(snake)\n\nThis function converts a snake case string (e.g. `badger_mushroom_snake`)\nto studly caps (e.g. `BadgerMushroomSnake`)\n\n```js\nsnakeToStudly(\"badger_mushroom_snake\") // => BadgerMushroomSnake\n```\n\n## snakeToCamel(snake)\n\nThis function converts a snake case string (e.g. `badger_mushroom_snake`)\nto camel case (e.g. `badgerMushroomSnake`)\n\n```js\nsnakeToCamel(\"badger_mushroom_snake\") // => badgerMushroomSnake\n```\n\n## plural(singular)\n\nThis is a **very** simple function for pluralising English words.\n\nIt only works on words with standard endings and plural forms,\nbecause pluralising words is notoriously difficult.  So don't\nexpect words like `woman`, `goose` or `sheep` to pluralise correctly.\n\n```js\nplural(\"badger\") // => \"badgers\"\nplural(\"doggy\")  // => \"doggies\"\nplural(\"grass\")  // => \"grasses\"\nplural(\"lash\")   // => \"lashes\"\nplural(\"watch\")  // => \"watches\"\nplural(\"box\")    // => \"boxes\"\n```\n\nIf you do have special cases then you can pass them as the second\nargument.  This is a simple lookup table mapping singular forms to\ntheir plural forms for words that you might need to pluralise that\nthe basic function can't handle.\n\n```js\nconst specialCases = {\n  woman: \"women\",\n  goose: \"geese\",\n  sheep: \"sheep\"\n}\nplural(\"woman\", specialCases) // => \"women\"\n```\n\n**DEPRECATION NOTE**: This function was originally called `pluralise()`\nwith an alias of `pluralize()` for our American friends who like the\nletter z.  It has been renamed to `plural()`.  The `pluralise()`\nand `pluralize()` aliases still exist but will be deprecated in a future\nversion.\n\n## singular(plural)\n\nThis is another **very** simple function for reversing the action\nof the `plural()` function to return the singular form of a plural\nnoun.\n\nIt only works on words with standard endings and plural forms,\nfor the same reasons that `plural()` is limited.\n\n```js\nsingular(\"badgers\")  // => \"badger\"\nsingular(\"doggies\")  // => \"doggy\"\nsingular(\"grasses\")  // => \"grass\"\nsingular(\"lashes\")   // => \"lash\"\nsingular(\"watches\")  // => \"watch\"\nsingular(\"boxes\")    // => \"box\"\n```\n\nIt also supports a second argument for providing special cases to help\nit out with words that have irregular pluralisations.\n\n```js\nconst specialCases = {\n  women: \"woman\",\n  geese: \"goose\",\n  sheep: \"sheep\"\n}\nsingular(\"women\", specialCases) // => \"woman\"\n```\n\n## inflect(n, singular, plural, no='no')\n\nThis function takes a number and a singular noun and attempts to\nconstruct a correct plural form.  It is only likely to work with\nEnglish or languages that work similar to English in using the plural\nform for zero or more than one item (e.g. \"no badger**s**\", \"2 badger**s**\")\nand singular form for exactly one item (e.g. \"1 badger\").\n\n```js\ninflect(0, \"badger\")   // \"no badgers\"\ninflect(1, \"badger\")   // \"1 badger\"\ninflect(2, \"badger\")   // \"2 badgers\"\n```\n\nIt uses the [plural()](#plural-singular-) function\nto construct the plural form.  The plural form can be provided as an optional\nthird argument if that fails to do the right thing.\n\n```js\ninflect(0, \"goose\", \"geese\")   // \"no geese\"\ninflect(1, \"goose\", \"geese\")   // \"1 goose\"\ninflect(2, \"goose\", \"geese\")   // \"2 geese\"\n```\n\nWhen `n` is zero, it will use `no` instead of the number `0`.  An optional\nfourth argument can be provided to change this.\n\n```js\ninflect(0, \"goose\", \"geese\", \"none more\")   // \"none more geese\"\n```\n\n## Inflect(n, singular, plural, no='No')\n\nThis is a wrapper around the [inflect()](#inflect-n--singular--plural--no---39-no--39--)\nfunction which capitalised the first letter, e.g. returning `\"No badgers\"` rather\nthan `\"no badgers\"`.\n\n```js\nInflect(0, \"badger\")   // \"No badgers\"\n```\n\n## format(message, data)\n\nThis implements a minimal template expansion function that inserts\ndata items into a message string.  Placeholders should be embedded\nin the message string in angle brackets.\n\n```js\nconst message = format('Hello &lt;name&gt;!', { name: 'World' });\n// -> Hello World!\n```",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-utils/manual/objects.md",
    "name": "./manual/objects.md",
    "content": "# Objects\n\nVarious utility functions for working with objects.\n\n## objMap(obj, fn)\n\nApplies a function to each value of an object and returns a new object.\n\n```js\nobjMap(\n    { a: 'alpha', b: 'bravo' },\n    v => v.toUpperCase()\n)\n// => { a: 'ALPHA', b: 'BRAVO' }\n```\n\n## remove(object, key)\n\nRemoves an item from an object and returns the corresponding value.\n\n```js\nlet source  = { a: 'alpha', b: 'bravo', c: 'charlie' };\nlet removed = remove(source, 'a');\n// source  = { b: 'bravo', c: 'charlie' }\n// removed = 'alpha'\n```\n\n## extract(object, keys, options)\n\nExtracts a subset of the keys and values from an object and returns a new object.\n\nThe keys to extract can be specified in a number of ways.  They can be the keys\nin an object that have a corresponding true value.\n\n```js\nextract(\n  { a: 'alpha', b: 'bravo', c: 'charlie', d: 'delta', e: 'echo' };\n  { a: true, c: true, e: true }\n)\n// => { a: 'alpha', c: 'charlie', e: 'echo' }\n```\n\nThe keys can also be specified as an array.\n\n```js\nextract(\n  { a: 'alpha', b: 'bravo', c: 'charlie', d: 'delta', e: 'echo' };\n  ['a', 'c', 'e']\n)\n// => { a: 'alpha', c: 'charlie', e: 'echo' }\n```\n\nIf the keys are all simple word strings (e.g. don't contain any non-word characters\nor spaces) then they can be specified as a string.\n\n```js\nextract(\n  { a: 'alpha', b: 'bravo', c: 'charlie', d: 'delta', e: 'echo' };\n  'a c e'\n)\n// => { a: 'alpha', c: 'charlie', e: 'echo' }\n```\n\nA regular expression can also be used.\n\n```js\nextract(\n  { a: 'alpha', b: 'bravo', c: 'charlie', d: 'delta', e: 'echo' };\n  /^[ace]$/\n)\n// => { a: 'alpha', c: 'charlie', e: 'echo' }\n```\n\nOr a function can be provided to select the items to extract.\n\n```js\nextract(\n  { a: 'alpha', b: 'bravo', c: 'charlie', d: 'delta', e: 'echo' };\n  key => key === 'a' || key === 'c' || key === 'e'\n)\n// => { a: 'alpha', c: 'charlie', e: 'echo' }\n```\n\nThe third argument can be used to provide a set of options.  The first is\nthe `delete` option which can be set to `true` (default value is `false`)\nto delete the items from the source object.\n\n```js\nlet source = { a: 'alpha', b: 'bravo', c: 'charlie', d: 'delta', e: 'echo' };\nlet subset = extract(\n  source,\n  'a c e',\n  { delete: true }\n)\n// source = { b: 'bravo', d: 'delta' }\n// subset = { a: 'alpha', c: 'charlie', e: 'echo' }\n```\n\nThe `key` option can be used to transform the keys that are extracted.\nIt should be a function that accepts the source key and returns the\nmodified key.\n\n```js\nlet subset = extract(\n  {\n    DATABASE_USERNAME: 'badger',\n    DATABASE_PASSWORD: 's3cr3t',\n  },\n  /^DATABASE_/,\n  { key: key => key.replace(/^DATABASE_/, '').toLowerCase() }\n)\n// => { username: 'badger', password: 's3cr3t' }\n```\n\nThe `value` option can be used to transform values that are extracted.\nIt should be a function that accepts the source value and returns the\nmodified value.\n\n```js\nextract(\n  { a: 10, b: 20, c: 30 },\n  'a b',\n  { value: value => value * 2 }\n)\n// => { a: 20, b: 40 }\n```\n\n## keys(object)\n\nAn alias for `Object.keys` which returns an array of the object's own\nenumerable string-keyed property names.\n\n```js\nkeys(\n  { a: 10, b: 20, c: 30 }\n)\n// => ['a', 'b', 'c']\n```\n\n## values(object)\n\nAn alias for `Object.values` which returns an array of the object's own\nenumerable string-keyed property values.\n\n```js\nvalues(\n  { a: 10, b: 20, c: 30 }\n)\n// => [10, 20, 30]\n```\n\n## entries(object)\n\nAn alias for `Object.entries` which returns an array of the object's own\nenumerable string-keyed property key-value pairs.\n\n```js\nentries(\n  { a: 10, b: 20, c: 30 }\n)\n// => [['a', 10], ['b', 20], ['c', 30]]\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-utils/manual/sort.md",
    "name": "./manual/sort.md",
    "content": "# Sort\n\nVarious utility functions for sorting objects.\n\n## stringSort(field)\n\nFunction to return a function that will sort an array of objects by\ncomparing the `field` property of each object as lower case strings.\n\n```js\nconst constants = [\n  { name: \"pi\",   value: 3.14  },\n  { name: \"e\",    value: 2.718 },\n  { name: \"phi\",  value: 1.618 },\n];\nconst sortByName = stringSort('name');\nconst sorted = constants.sort(sortByName);\n// Returns: [\n//   { name: \"e\",    value: 2.718 },\n//   { name: \"phi\",  value: 1.618 },\n//   { name: \"pi\",   value: 3.14  },\n// ]\n```\n\n## numberSort(field)\n\nFunction to return a function that will sort an array of objects by\ncomparing the `field` property of each as floating point\nnumbers.\n\n```js\nconst constants = [\n  { name: \"pi\",   value: 3.14  },\n  { name: \"e\",    value: 2.718 },\n  { name: \"phi\",  value: 1.618 },\n];\nconst sortByValue = numberSort('value');\nconst sorted = constants.sort(sortByValue);\n// Returns: [\n//   { name: \"phi\",  value: 1.618 },\n//   { name: \"e\",    value: 2.718 },\n//   { name: \"pi\",   value: 3.14  },\n// ]\n```\n\n## integerSort(field)\n\nFunction to return a function that will sort an array of objects by\ncomparing the `field` property of each as integers.\n\n```js\nconst people = [\n  { name: \"Fred\",   age: 18 },\n  { name: \"Shaggy\", age: 17 },\n  { name: \"Daphne\", age: 16 },\n  { name: \"Velma\",  age: 15 },\n];\nconst sortByAge = integerSort('age');\nconst sorted = people.sort(sortByAge);\n// Returns: [\n//   { name: \"Velma\",  age: 15 },\n//   { name: \"Daphne\", age: 16 },\n//   { name: \"Shaggy\", age: 17 },\n//   { name: \"Fred\",   age: 18 },\n// ]\n```\n\n## multiSort(fields)\n\nThis function can be used to compose a sorting function from a number\nof other sorting functions.  For example, suppose you have an array of\nobjects that you want to sort by `surname` first, and if they have the\nsame surname, then by `forename`.\n\n```js\nconst people = [\n  { forename: \"John\", surname: \"Smith\" },\n  { forename: \"Jack\", surname: \"Smith\" },\n  { forename: \"John\", surname: \"Jones\" },\n];\n```\n\nYou can compose a sort function by passing an array of sort functions\nto `multisort()`, like so:\n\n```js\nconst sortByName = multiSort([\n  stringSort('surname'),\n  stringSort('forename')\n]);\nconst sorted = people.sort(sortByName);\n// Returns: [\n//   { forename: \"John\", surname: \"Jones\" },\n//   { forename: \"Jack\", surname: \"Smith\" },\n//   { forename: \"John\", surname: \"Smith\" },\n// ]\n```\n\nThe shorthand form allows you to specify the field names as a\nwhitespace delimited string.  It will construct the sort function\nfrom that specification.  If you don't specify otherwise (more on that\nbelow), it will assume that they're string fields to be sorted in ascending\n(alphabetical) order.\n\n```js\n// short form:\nconst sortByName = multiSort('surname forename');\n\n// same as:\nconst sortByName = multiSort([\n  stringSort('surname'),\n  stringSort('forename')\n]);\n```\n\nHere's a slightly more complex example where we want to sort by\n`surname`, `forename` (both in ascending order) and `age` in\ndescending order (i.e. oldest first).  The `descendingOrder` wrapper\nfunction can be used to convert an ascending order sort function into\none that sorts in descending order.\n\n```js\nconst people = [\n  { forename: \"John\", surname: \"Smith\", age: 28 },\n  { forename: \"Jack\", surname: \"Smith\", age: 30 },\n  { forename: \"John\", surname: \"Smith\", age: 25 },\n  { forename: \"John\", surname: \"Jones\", age: 32 },\n];\nconst sortByNameAndAge = multiSort([\n  stringSort('surname'),\n  stringSort('forename'),\n  descendingOrder(integerSort('age'))\n]);\nconst sorted = people.sort(sortByNameAndAge);\n// Returns: [\n//   { forename: \"John\", surname: \"Jones\", age: 32 },\n//   { forename: \"Jack\", surname: \"Smith\", age: 30 },\n//   { forename: \"John\", surname: \"Smith\", age: 28 },\n//   { forename: \"John\", surname: \"Smith\", age: 25 },\n// ]\n```\n\nYou can also use the shorthand form here.  The field name,\noptional field type and optional sort order should be joined\nby colons.\n\n```js\n// short form:\nconst sortByName = multiSort('surname forename age:integer:desc');\n\n// long form:\nconst sortByNameAndAge = multiSort([\n  stringSort('surname'),\n  stringSort('forename'),\n  descendingOrder(integerSort('forename'))\n]);\n```\n\nFor the field types you can use the long names `string` (default),\n`number` and `integer` or their abbreviations `str`, `num` and `int`.\nYou can specify the sort order as `ascending` (default) or `descending`\nif verbosity is your thing, or using the shorter `asc` and `desc` forms.\n\nHere are some examples of the mappings from strings to functions to clarify.\n\n| Short Form                 | Expansion                              |\n|----------------------------|----------------------------------------|\n| surname                    | stringSort('surname')                  |\n| surname:str                | stringSort('surname')                  |\n| surname:string             | stringSort('surname')                  |\n| surname:str:desc           | descendingOrder(stringSort('surname')) |\n| surname:string:descending  | descendingOrder(stringSort('surname')) |\n| age:int                    | integerSort('age')                     |\n| age:integer                | integerSort('age')                     |\n| age:int:desc               | descendingOrder(integerSort('age'))    |\n| age:integer:descending     | descendingOrder(integerSort('age'))    |\n| price:num                  | numberSort('age')                      |\n| price:number               | numberSort('price')                    |\n| price:num:desc             | descendingOrder(numberSort('price'))   |\n| price:number:descending    | descendingOrder(numberSort('price'))   |\n\n\n## stringField(obj,field)\n\nHelper function used by `stringSort()` to extract a field from an object\nand coerce to a string.\n\n```js\nconst a = stringField({ a: \"ten\" }, \"a\");     // \"ten\"\nconst a = stringField({ a: \"10\"  }, \"a\");     // \"10\"\n```\n\n## numberField(obj,field)\n\nHelper function used by `numberSort()` to extract a field from an object\nand coerce to a floating point number.\n\n```js\nconst a = numberField({ pi: 3.14  }, \"pi\");     // 3.14\nconst a = numberField({ a: \"3.14\" }, \"pi\");     // 3.14\n```\n\n## integerField(obj,field)\n\nHelper function used by `integerSort()` to extract a field from an object\nand coerce to an integer.\n\n```js\nconst a = integerField({ a:  10  }, \"a\");     // 10\nconst a = integerField({ a: \"10\" }, \"a\");     // 10\n```\n\n## descendingOrder(sortFn)\n\nHelper function used by `multiSort()` to convert a sort function that sorts\nby ascending order into one that sorts by descending order.\n\n```js\nconst ageAsc  = integerSort('age');\nconst ageDesc = descendingOrder(ageAsc);\n```\n\n## ascendingOrder(sortFn)\n\nHelper function used by `multiSort()` provided for completeness.  Given that\nsort functions sort in ascending order by default, this function simply returns\nthe function passed to it.\n\n```js\nconst ageAsc1 = integerSort('age');\nconst ageAsc2 = ascendingOrder(ageAsc1);    // returns ageAsc1\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-utils/manual/timing.md",
    "name": "./manual/timing.md",
    "content": "# Timing Function\n\nVarious utility functions for working with timers.\n\n## debounce(func, timeout=300)\n\nFunction to generate a debouncer function which will call the wrapped function after\na timeout.  If the debouncer function is called again before the wrapped function has\nbeen called then the debounced will reset the timer.\n\n```js\nfunction foo() {\n    console.log(\"foo was called\");\n}\n\nconst callFooSoon = debounce(foo, 1000);\n\ncallFooSoon();  // starts 1s timer\ncallFooSoon();  // resets timer\ncallFooSoon();  // resets timer\n    // => foo() will be called once, 1s after last reset\n```\n\n## sleep(ms)\n\nFunction which returns a Promise which will resolve after a delay.\n\n```js\nsleep(1000).then( () => console.log(\"Called one second later\") )\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-utils/manual/errors.md",
    "name": "./manual/errors.md",
    "content": "# Errors\n\nFunctions for throwing errors.\n\n## fail(message)\n\nThis function throws an error with a message constructed by\nconcatenating all arguments passed to it.\n\n```js\nfail('Failed to ', 'insert', ' record');\n// -> throws error with message 'Failed to insert record'\n```\n\nThe benefit of using this function over `throw` is that it can\nbe used in an expression.\n\n```js\nconst x = params.x || fail('No x specified');\n```\n\n## failMsg(message, data)\n\nThis function throws an error with a message generated from\nexpanding a message template using the\n[format()](manual/text.html#format-message--data-) function.\n\n```js\nfailMsg('Failed to &lt;action&gt; record', { action: 'insert' })\n// -> throws error with message 'Failed to insert record'\n```\n\n## rethrow(error)\n\nFunction to rethrow an error. The benefit of using this function over `throw` is that it can be used in an expression.\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-utils/manual/misc.md",
    "name": "./manual/misc.md",
    "content": "# Miscellaneous Functions\n\nMiscellaneous utility functions.\n\n## doNothing()\n\nThis function does nothing.  Nothing at all.  None more functionality.\n\nIt can be used when you want to explicitly set a handler which does\nnothing.\n\n```js\n// debugging flag\nconst DEBUGGING = false;\n\n// debug function which calls console.log() or does nothing,\n// depending on the value of DEBUGGING\nconst debug = DEBUGGING\n  ? msg => console.log(msg)\n  : doNothing\n\n// call the debug function\ndebug(\"Hello World!\")\n```\n\n## defaultLocale()\n\nReturns the default locale.\n",
    "static": true,
    "access": "public"
  }
]