[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/utils/assert.js",
    "content": "/**\n * Determines if a value is a string\n * @param {String} value - value to test\n * @return {Boolean} true if `value` is a string or false if not\n */\nexport function isString(value) {\n  return typeof value === 'string';\n}\n\n/**\n * Determines if a value is an Integer\n * @param {Integer} value - value to test\n * @return {Boolean} true if `value` is a string or false if not\n */\nexport function isInteger(value) {\n  return Number.isInteger(value);\n}\n\n/**\n * Determines if a value is an array\n * @param {Array} value - value to test\n * @return {Boolean} true if `value` is an Array or false if not\n */\nexport function isArray(value) {\n  return Array.isArray(value);\n}\n\n/**\n * Determines if a value is a Function\n * @param {Function} value - value to test\n * @return {Boolean} true if `value` is a Function or false if not\n */\nexport function isFunction(value) {\n  return typeof value === 'function'\n}\n\n/**\n * Determines if a value is an Object (but not an Array)\n * @param {Object} value - value to test\n * @return {Boolean} true if `value` is an Object or false if not\n */\nexport function isObject(value) {\n  return typeof value === \"object\"\n    && ! isArray(value)\n    && ! isNull(value);\n}\n\n/**\n * Determines if a value is `undefined`\n * @param {any} value - value to test\n * @return {Boolean} true if `value` is `undefined` or false if not\n */\nexport function isUndefined(value) {\n  return typeof value === 'undefined';\n}\n\n/**\n * Determines if a value is `null`\n * @param {any} value - value to test\n * @return {Boolean} true if `value` is `null` or false if not\n */\nexport function isNull(value) {\n  return value === null;\n}\n\n/**\n * Determines if a value is defined and not null\n * @param {any} value - value to test\n * @return {Boolean} true if `value` is not `undefined` or `null`\n */\nexport function hasValue(value) {\n  return ! (isUndefined(value) || isNull(value));\n}\n\n/**\n * Determines if all values are defined and not null\n * @param {any[]} values - values to test\n * @return {Boolean} true if all values are not `undefined` or `null`\n */\nexport function haveValue(...values) {\n  return values.every( value => hasValue(value) );\n}\n\n/**\n * Determines if a value is undefined or null\n * @param {any} value - value to test\n * @return {Boolean} true if `value` is `undefined` or `null`\n */\nexport function noValue(value) {\n  return ! hasValue(value);\n}\n\n",
    "static": true,
    "longname": "/Users/abw/js/badger-utils/src/utils/assert.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "isString",
    "memberof": "src/utils/assert.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/assert.js~isString",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{isString}",
    "description": "Determines if a value is a string",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if `value` is a string or false if not"
    }
  },
  {
    "__docId__": 50,
    "kind": "function",
    "name": "isInteger",
    "memberof": "src/utils/assert.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/assert.js~isInteger",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{isInteger}",
    "description": "Determines if a value is an Integer",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if `value` is a string or false if not"
    }
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "isArray",
    "memberof": "src/utils/assert.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/assert.js~isArray",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{isArray}",
    "description": "Determines if a value is an array",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if `value` is an Array or false if not"
    }
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "isFunction",
    "memberof": "src/utils/assert.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/assert.js~isFunction",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{isFunction}",
    "description": "Determines if a value is a Function",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if `value` is a Function or false if not"
    }
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "isObject",
    "memberof": "src/utils/assert.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/assert.js~isObject",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{isObject}",
    "description": "Determines if a value is an Object (but not an Array)",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if `value` is an Object or false if not"
    }
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "isUndefined",
    "memberof": "src/utils/assert.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/assert.js~isUndefined",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{isUndefined}",
    "description": "Determines if a value is `undefined`",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if `value` is `undefined` or false if not"
    }
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "isNull",
    "memberof": "src/utils/assert.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/assert.js~isNull",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{isNull}",
    "description": "Determines if a value is `null`",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if `value` is `null` or false if not"
    }
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "hasValue",
    "memberof": "src/utils/assert.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/assert.js~hasValue",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{hasValue}",
    "description": "Determines if a value is defined and not null",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if `value` is not `undefined` or `null`"
    }
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "haveValue",
    "memberof": "src/utils/assert.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/assert.js~haveValue",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{haveValue}",
    "description": "Determines if all values are defined and not null",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "values to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if all values are not `undefined` or `null`"
    }
  },
  {
    "__docId__": 58,
    "kind": "function",
    "name": "noValue",
    "memberof": "src/utils/assert.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/assert.js~noValue",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{noValue}",
    "description": "Determines if a value is undefined or null",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if `value` is `undefined` or `null`"
    }
  },
  {
    "__docId__": 59,
    "kind": "file",
    "name": "src/utils/error.js",
    "content": "/**\n * Throws a new Error object\n * @param {String[]} message - error message string(s)\n * @throws {Error}\n */\nexport function fail(...message) {\n  throw new Error(message.join(''));\n}\n\n/**\n * Re-throw an existing Error object\n * @param {Error} error - error object\n * @throws {Error}\n */\nexport function rethrow(error) {\n  throw error;\n}\n\n",
    "static": true,
    "longname": "/Users/abw/js/badger-utils/src/utils/error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 60,
    "kind": "function",
    "name": "fail",
    "memberof": "src/utils/error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/error.js~fail",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{fail}",
    "description": "Throws a new Error object",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "error message string(s)"
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "rethrow",
    "memberof": "src/utils/error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/error.js~rethrow",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{rethrow}",
    "description": "Re-throw an existing Error object",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "error object"
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 62,
    "kind": "file",
    "name": "src/utils/misc.js",
    "content": "/**\n * Do nothing.  Nothing at all.\n */\nexport function doNothing() {\n  // speak again Cordelia\n}\n",
    "static": true,
    "longname": "/Users/abw/js/badger-utils/src/utils/misc.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "doNothing",
    "memberof": "src/utils/misc.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/misc.js~doNothing",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{doNothing}",
    "description": "Do nothing.  Nothing at all.",
    "lineNumber": 4,
    "params": [],
    "return": null
  },
  {
    "__docId__": 64,
    "kind": "file",
    "name": "src/utils/numbers.js",
    "content": "import { noValue } from \"./assert.js\";\n\nlet numberDefaults = {\n  currency:  '£',\n  thousands: ',',\n  poa:       'POA'\n};\n\n/**\n * Function to add commas as thousand separators in a number.\n * @param {Integer} n - number of items\n * @param {String} [thousands=','] - optional thousands separator instead of a comma\n * @example\n * commas(12345)          # 12,345\n * commas(12345.67)       # 12,345.67\n * commas(12345.67, ' ')  # 12 345.67\n */\nexport function commas(n, thousands=numberDefaults.thousands) {\n  if (noValue(n)) {\n    return '';\n  }\n  var bits  = n.toString().split('.'),\n    rgx   = /(\\d+)(\\d{3})/;\n\n  while (rgx.test(bits[0])) {\n    bits[0] = bits[0].replace(rgx, `$1${thousands}$2`);\n  }\n  return bits.join('.');\n}\n\n/**\n * Function to format a number as a price with commas and a currency symbol.\n * Uses British pounds by default because that's what works for me.\n * @param {Integer} money - number of items\n * @param {String} [options] - configuration options\n * @param {String} [options.currency='£'] - currency prefix\n * @param {String} [options.thousands=','] - thousands separator\n * @example\n * price(12345)          # £12,345.00\n * price(12345.67)       # £12,345.67\n * price(12345.67, { thousands: ' ' })  # £12 345.67\n * price(12345.67, { currency: '$' })   # $12 345.67\n */\nexport function price(money, options={ }) {\n  const config = { ...numberDefaults, ...options };\n  return money\n    ? config.currency + commas(parseFloat(money).toFixed(2), config.thousands)\n    : '';\n}\n\n/**\n * Function to format a number as a price with commas and a currency symbol.\n * If the amount is zero, undefined or null then it returns \"£POA\".\n * @param {Integer} money - number of items\n * @param {String} [options] - configuration options\n * @param {String} [options.currency='£'] - currency prefix\n * @param {String} [options.thousands=','] - thousands separator\n * @example\n * priceOrPOA(12345)     # £12,345.00\n * priceOrPOA(undefined) # £POA\n * priceOrPOA(12345.67, { thousands: ' ' })  # 12 345.67\n */\nexport function priceOrPOA(money, options={ }) {\n  const config = { ...numberDefaults, ...options };\n  return config.currency +\n    (money\n      ? commas(parseFloat(money).toFixed(2), config.thousands)\n      : config.poa);\n}\n\n/**\n * Function to format a number as a price with commas and a currency symbol.\n * If the amount is zero, undefined or null then it returns \"£0\".\n * @param {Integer} money - number of items\n * @param {String} [options] - configuration options\n * @param {String} [options.currency='£'] - currency prefix\n * @param {String} [options.thousands=','] - thousands separator\n * @example\n * priceOrZero(12345)     # £12,345.00\n * priceOrZero(0)         # £0\n * priceOrZero(undefined) # £0\n * priceOrZero(12345.67, { thousands: ' ' })  # 12 345.67\n */\nexport function priceOrZero(money, options={ }) {\n  const config = { ...numberDefaults, ...options };\n  return config.currency + commas(parseFloat(money || 0).toFixed(2), config.thousands)\n}\n\n/**\n * Function to format a number as an inter price with commas and a currency symbol.\n * If the amount is zero or otherwise false then an empty string is returned.\n * @param {Integer} money - number of items\n * @param {String} [options] - configuration options\n * @param {String} [options.currency='£'] - currency prefix\n * @param {String} [options.thousands=','] - thousands separator\n * @example\n * pounds(12345)     # £12,345\n * pounds(12345.67)  # £12,345\n * pounds(0)         #\n * pounds(12345.67, { currency: '$', thousands: ' ' })  # $12 345\n */\nexport function pounds(money, options={ }) {\n  const config = { ...numberDefaults, ...options };\n  return money\n    ? config.currency + commas(Math.floor(parseFloat(money)).toString(), config.thousands)\n    : '';\n}\n\n/**\n * Function to create an array with a range of numbers.  Note that this will\n * include the last value.\n * @param {Integer} first - first number\n * @param {Integer} last - last number\n */\nexport const range = (first, last) =>\n  Array(1 + last - first).fill(first).map((x, y) => x + y)\n",
    "static": true,
    "longname": "/Users/abw/js/badger-utils/src/utils/numbers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "name": "numberDefaults",
    "memberof": "src/utils/numbers.js",
    "static": true,
    "longname": "src/utils/numbers.js~numberDefaults",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-utils",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{\"currency\": string, \"thousands\": string, \"poa\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 66,
    "kind": "function",
    "name": "commas",
    "memberof": "src/utils/numbers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/numbers.js~commas",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{commas}",
    "description": "Function to add commas as thousand separators in a number.",
    "examples": [
      "commas(12345)          # 12,345\ncommas(12345.67)       # 12,345.67\ncommas(12345.67, ' ')  # 12 345.67"
    ],
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "number of items"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "','",
        "defaultRaw": "','",
        "name": "thousands",
        "description": "optional thousands separator instead of a comma"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "function",
    "name": "price",
    "memberof": "src/utils/numbers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/numbers.js~price",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{price}",
    "description": "Function to format a number as a price with commas and a currency symbol.\nUses British pounds by default because that's what works for me.",
    "examples": [
      "price(12345)          # £12,345.00\nprice(12345.67)       # £12,345.67\nprice(12345.67, { thousands: ' ' })  # £12 345.67\nprice(12345.67, { currency: '$' })   # $12 345.67"
    ],
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "money",
        "description": "number of items"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'£'",
        "defaultRaw": "'£'",
        "name": "options.currency",
        "description": "currency prefix"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "','",
        "defaultRaw": "','",
        "name": "options.thousands",
        "description": "thousands separator"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "function",
    "name": "priceOrPOA",
    "memberof": "src/utils/numbers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/numbers.js~priceOrPOA",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{priceOrPOA}",
    "description": "Function to format a number as a price with commas and a currency symbol.\nIf the amount is zero, undefined or null then it returns \"£POA\".",
    "examples": [
      "priceOrPOA(12345)     # £12,345.00\npriceOrPOA(undefined) # £POA\npriceOrPOA(12345.67, { thousands: ' ' })  # 12 345.67"
    ],
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "money",
        "description": "number of items"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'£'",
        "defaultRaw": "'£'",
        "name": "options.currency",
        "description": "currency prefix"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "','",
        "defaultRaw": "','",
        "name": "options.thousands",
        "description": "thousands separator"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "priceOrZero",
    "memberof": "src/utils/numbers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/numbers.js~priceOrZero",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{priceOrZero}",
    "description": "Function to format a number as a price with commas and a currency symbol.\nIf the amount is zero, undefined or null then it returns \"£0\".",
    "examples": [
      "priceOrZero(12345)     # £12,345.00\npriceOrZero(0)         # £0\npriceOrZero(undefined) # £0\npriceOrZero(12345.67, { thousands: ' ' })  # 12 345.67"
    ],
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "money",
        "description": "number of items"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'£'",
        "defaultRaw": "'£'",
        "name": "options.currency",
        "description": "currency prefix"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "','",
        "defaultRaw": "','",
        "name": "options.thousands",
        "description": "thousands separator"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "pounds",
    "memberof": "src/utils/numbers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/numbers.js~pounds",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{pounds}",
    "description": "Function to format a number as an inter price with commas and a currency symbol.\nIf the amount is zero or otherwise false then an empty string is returned.",
    "examples": [
      "pounds(12345)     # £12,345\npounds(12345.67)  # £12,345\npounds(0)         #\npounds(12345.67, { currency: '$', thousands: ' ' })  # $12 345"
    ],
    "lineNumber": 102,
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "money",
        "description": "number of items"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'£'",
        "defaultRaw": "'£'",
        "name": "options.currency",
        "description": "currency prefix"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "','",
        "defaultRaw": "','",
        "name": "options.thousands",
        "description": "thousands separator"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "function",
    "name": "range",
    "memberof": "src/utils/numbers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/numbers.js~range",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{range}",
    "description": "Function to create an array with a range of numbers.  Note that this will\ninclude the last value.",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "first",
        "description": "first number"
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "last",
        "description": "last number"
      }
    ],
    "return": null
  },
  {
    "__docId__": 72,
    "kind": "file",
    "name": "src/utils/text.js",
    "content": "import { isString, isArray, noValue } from \"./assert.js\";\nimport { commas } from \"./numbers.js\";\n\n/**\n * Split a comma/whitespace delimited string into an Array\n * @param {String} value - string to split\n * @return {Array} array of split strings\n * @example\n * const strings = splitList('one two three')\n * @example\n * const strings = splitList('one,two,three')\n * @example\n * const strings = splitList('one, two, three')\n */\nexport function splitList(value) {\n  if (noValue(value)) {\n    return [ ];\n  }\n  else if (isString(value)) {\n    return value.length\n      ? value.split(/,\\s*|\\s+/)\n      : [ ]\n  }\n  else if (isArray(value)) {\n    return value;\n  }\n  return [value];\n}\n\n/**\n * Join an Array into a single string\n * @param {Array} array - array to join\n * @param {String} [joint=' '] - delimiter to join strings\n * @param {String} [lastJoint=joint] - delimiter for final item\n * @return {String} joined string\n * @example\n * joinList(['one', 'two', 'three']);   // one two three\n * @example\n * joinList(['one', 'two', 'three'], ', ');   // one, two, three\n * @example\n * joinList(['one', 'two', 'three'], ', ', ' and ');   // one, two and three\n */\nexport function joinList(array, joint=' ', lastJoint=joint) {\n  let copy = [...array];\n  const last = copy.pop();\n  return copy.length\n    ? [copy.join(joint), last].join(lastJoint)\n    : last;\n}\n\n/**\n * Join an Array into a single string using commas for delimiters and ` and ` for the final item\n * @param {Array} array - array to join\n * @param {String} [joint=', '] - delimiter to join strings\n * @param {String} [lastJoint=' and '] - delimiter for final item\n * @return {String} joined string\n * @example\n * joinListAnd(['one', 'two', 'three']);   // one, two and three\n */\nexport function joinListAnd(array, joint=', ', lastJoint=' and ') {\n  return joinList(array, joint, lastJoint);\n}\n\n/**\n * Join an Array into a single string using commas for delimiters and ` or ` for the final item\n * @param {Array} array - array to join\n * @param {String} [joint=', '] - delimiter to join strings\n * @param {String} [lastJoint=' or '] - delimiter for final item\n * @return {String} joined string\n * @example\n * joinListOr(['one', 'two', 'three']);   // one, two or three\n */\nexport function joinListOr(array, joint=', ', lastJoint=' or ') {\n  return joinList(array, joint, lastJoint);\n}\n\n/**\n * Capitalise a string by converting the first character to upper case and other characters to lower case\n * @param {String} word - word to capitalise\n * @return {String} capitalised string\n * @example\n * capitalise('badger');   // Badger\n * @example\n * capitalise('BADGER');   // Badger\n */\nexport function capitalise(word) {\n  return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n}\n\n/**\n * Capitalise all words in a string by converting the first character of each word to upper case\n * @param {String} string - words to capitalise\n * @return {String} capitalised string\n * @example\n * capitalise('badger fun');   // Badger Fun\n */\nexport function capitaliseWords(string) {\n  return string.replace(\n    /(?:^|\\s)\\S/g,\n    a => a.toUpperCase()\n  );\n}\n\n// for the yanks\nexport const capitalize = capitalise;\nexport const capitalizeWords = capitaliseWords;\n\n\n/**\n * Convert a snake case string to studly caps\n * @param {String} snake - word to capitalise\n * @return {String} capitalised string\n * @example\n * snakeToStudly('happy_badger_dance');   // HappyBadgerDance\n * @example\n * snakeToStudly('happy_badger/dance');   // HappyBadger/Dance\n */\nexport function snakeToStudly(snake) {\n  return snake.split('/').map(\n    // each segment can be like foo_bar which we convert to FooBar\n    segment => segment.split('_').map(capitalise).join('')\n  ).join('/');\n}\n\n/**\n * Convert a snake case string to camel case\n * @param {String} snake - word to capitalise\n * @return {String} capitalised string\n * @example\n * snakeToCamel('happy_badger_dance');   // happyBadgerDance\n * @example\n * snakeToCamel('happy_badger/dance');   // happyBadger/dance\n */\nexport function snakeToCamel(snake) {\n  return snake.split('/').map(\n    // each segment can be like foo_bar which we convert to fooBar\n    segment => segment.split('_').map((i, n) => n ? capitalise(i) : i).join('')\n  ).join('/');\n}\n\n/**\n * A very primitive function to pluralise the singular form of a words.  It only\n * words on words with standard endings and plural forms, because pluralising\n * words is notoriously difficult.\n * @param {String} singular - word to pluralise\n * @return {String} plural form\n * @example\n * pluralise('box');     // boxes\n * @example\n * pluralise('doggy');   // doggies\n * @example\n * pluralise('badger');  // badgers\n * @example\n * pluralise('woman');   // womans\n */\nexport function pluralise(singular) {\n  let found;\n\n  if (singular.match(/(ss?|sh|ch|x)$/)) {\n    // e.g. grass/grasses, lash/lashes, watch/watches, box, boxes\n    return singular + 'es';\n  }\n  else if ((found = singular.match(/(.*?[^aeiou])y$/))) {\n    // doggy/doggies\n    return found[1] + 'ies';\n  }\n  else if (singular.match(/([^s\\d\\W])$/)) {\n    // cat/cats\n    return singular + 's';\n  }\n  return singular;\n}\n\n/**\n * Utility function to inflect a string passed as the second argument to the singular/plural\n * form based on the number passed as the first argument.  Uses the {@link pluralise()} function\n * which only works on words with standard pluralisations.  The third argument can be provided\n * as the plural form where necessary.  The optional 4th argument can be used to provide a different\n * word for the case where n is 0.  The default is \"no\", e.g. \"no badgers\" when n is 0.\n * @param {Integer} n - number of items\n * @param {String} singular - singular form\n * @param {String} [plural] - optional plural form\n * @param {String} [no='no'] - optional word to use when `n` is 0\n * @example\n * inflect(0, 'cat')     # no cats\n * @example\n * inflect(1, 'cat')     # 1 cat\n * @example\n * inflect(2, 'cat')     # 2 cats\n * @example\n * inflect(0, 'child', 'children')     # no children\n * @example\n * inflect(1, 'child', 'children')     # 1 child\n * @example\n * inflect(2, 'child', 'children')     # 2 children\n * @example\n * inflect(0, 'black', 'black', \"none, none more\")     # none, none more black\n */\nexport function inflect(n, singular, plural, no='no') {\n  return (n ? commas(n) : no)\n    + ' '\n    + (n === 1 ? singular : (plural || pluralise(singular)));\n}\n\n/**\n * Wrapper around {@link inflect()} which uses the word \"No\" instead of \"no\" for the\n * zero case, i.e. Inflect() is the capitalized form of inflect()\n * @param {Integer} n - number of items\n * @param {String} singular - singular form\n * @param {String} [plural] - optional plural form\n * @param {String} [no='No'] - optional word to use when `n` is 0\n */\nexport function Inflect(n, singular, plural, no='No') {\n  return inflect(n, singular, plural, no);\n}\n\n\nexport function splitParas() {\n  var text = Array.prototype.slice.call(arguments).join('');\n  if (text.length === 0) {\n    return [ ];\n  }\n  var rows = text.split(/\\s*\\n+\\s*/).filter(\n    function(item) { return item.length > 0 }\n  );\n  return rows;\n}\n\n",
    "static": true,
    "longname": "/Users/abw/js/badger-utils/src/utils/text.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 73,
    "kind": "function",
    "name": "splitList",
    "memberof": "src/utils/text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/text.js~splitList",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{splitList}",
    "description": "Split a comma/whitespace delimited string into an Array",
    "examples": [
      "const strings = splitList('one two three')",
      "const strings = splitList('one,two,three')",
      "const strings = splitList('one, two, three')"
    ],
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "string to split"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "array of split strings"
    }
  },
  {
    "__docId__": 74,
    "kind": "function",
    "name": "joinList",
    "memberof": "src/utils/text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/text.js~joinList",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{joinList}",
    "description": "Join an Array into a single string",
    "examples": [
      "joinList(['one', 'two', 'three']);   // one two three",
      "joinList(['one', 'two', 'three'], ', ');   // one, two, three",
      "joinList(['one', 'two', 'three'], ', ', ' and ');   // one, two and three"
    ],
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": "array to join"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "' '",
        "defaultRaw": "' '",
        "name": "joint",
        "description": "delimiter to join strings"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "joint",
        "defaultRaw": "joint",
        "name": "lastJoint",
        "description": "delimiter for final item"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "joined string"
    }
  },
  {
    "__docId__": 75,
    "kind": "function",
    "name": "joinListAnd",
    "memberof": "src/utils/text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/text.js~joinListAnd",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{joinListAnd}",
    "description": "Join an Array into a single string using commas for delimiters and ` and ` for the final item",
    "examples": [
      "joinListAnd(['one', 'two', 'three']);   // one, two and three"
    ],
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": "array to join"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "', '",
        "defaultRaw": "', '",
        "name": "joint",
        "description": "delimiter to join strings"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "' and '",
        "defaultRaw": "' and '",
        "name": "lastJoint",
        "description": "delimiter for final item"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "joined string"
    }
  },
  {
    "__docId__": 76,
    "kind": "function",
    "name": "joinListOr",
    "memberof": "src/utils/text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/text.js~joinListOr",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{joinListOr}",
    "description": "Join an Array into a single string using commas for delimiters and ` or ` for the final item",
    "examples": [
      "joinListOr(['one', 'two', 'three']);   // one, two or three"
    ],
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": "array to join"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "', '",
        "defaultRaw": "', '",
        "name": "joint",
        "description": "delimiter to join strings"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "' or '",
        "defaultRaw": "' or '",
        "name": "lastJoint",
        "description": "delimiter for final item"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "joined string"
    }
  },
  {
    "__docId__": 77,
    "kind": "function",
    "name": "capitalise",
    "memberof": "src/utils/text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/text.js~capitalise",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{capitalise}",
    "description": "Capitalise a string by converting the first character to upper case and other characters to lower case",
    "examples": [
      "capitalise('badger');   // Badger",
      "capitalise('BADGER');   // Badger"
    ],
    "lineNumber": 86,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "word",
        "description": "word to capitalise"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "capitalised string"
    }
  },
  {
    "__docId__": 78,
    "kind": "function",
    "name": "capitaliseWords",
    "memberof": "src/utils/text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/text.js~capitaliseWords",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{capitaliseWords}",
    "description": "Capitalise all words in a string by converting the first character of each word to upper case",
    "examples": [
      "capitalise('badger fun');   // Badger Fun"
    ],
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "string",
        "description": "words to capitalise"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "capitalised string"
    }
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "name": "capitalize",
    "memberof": "src/utils/text.js",
    "static": true,
    "longname": "src/utils/text.js~capitalize",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{capitalize}",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "variable",
    "name": "capitalizeWords",
    "memberof": "src/utils/text.js",
    "static": true,
    "longname": "src/utils/text.js~capitalizeWords",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{capitalizeWords}",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "snakeToStudly",
    "memberof": "src/utils/text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/text.js~snakeToStudly",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{snakeToStudly}",
    "description": "Convert a snake case string to studly caps",
    "examples": [
      "snakeToStudly('happy_badger_dance');   // HappyBadgerDance",
      "snakeToStudly('happy_badger/dance');   // HappyBadger/Dance"
    ],
    "lineNumber": 118,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "snake",
        "description": "word to capitalise"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "capitalised string"
    }
  },
  {
    "__docId__": 82,
    "kind": "function",
    "name": "snakeToCamel",
    "memberof": "src/utils/text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/text.js~snakeToCamel",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{snakeToCamel}",
    "description": "Convert a snake case string to camel case",
    "examples": [
      "snakeToCamel('happy_badger_dance');   // happyBadgerDance",
      "snakeToCamel('happy_badger/dance');   // happyBadger/dance"
    ],
    "lineNumber": 134,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "snake",
        "description": "word to capitalise"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "capitalised string"
    }
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "pluralise",
    "memberof": "src/utils/text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/text.js~pluralise",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{pluralise}",
    "description": "A very primitive function to pluralise the singular form of a words.  It only\nwords on words with standard endings and plural forms, because pluralising\nwords is notoriously difficult.",
    "examples": [
      "pluralise('box');     // boxes",
      "pluralise('doggy');   // doggies",
      "pluralise('badger');  // badgers",
      "pluralise('woman');   // womans"
    ],
    "lineNumber": 156,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "singular",
        "description": "word to pluralise"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "plural form"
    }
  },
  {
    "__docId__": 84,
    "kind": "function",
    "name": "inflect",
    "memberof": "src/utils/text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/text.js~inflect",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{inflect}",
    "description": "Utility function to inflect a string passed as the second argument to the singular/plural\nform based on the number passed as the first argument.  Uses the {@link pluralise()} function\nwhich only works on words with standard pluralisations.  The third argument can be provided\nas the plural form where necessary.  The optional 4th argument can be used to provide a different\nword for the case where n is 0.  The default is \"no\", e.g. \"no badgers\" when n is 0.",
    "examples": [
      "inflect(0, 'cat')     # no cats",
      "inflect(1, 'cat')     # 1 cat",
      "inflect(2, 'cat')     # 2 cats",
      "inflect(0, 'child', 'children')     # no children",
      "inflect(1, 'child', 'children')     # 1 child",
      "inflect(2, 'child', 'children')     # 2 children",
      "inflect(0, 'black', 'black', \"none, none more\")     # none, none more black"
    ],
    "lineNumber": 199,
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "number of items"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "singular",
        "description": "singular form"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "plural",
        "description": "optional plural form"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'no'",
        "defaultRaw": "'no'",
        "name": "no",
        "description": "optional word to use when `n` is 0"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "function",
    "name": "Inflect",
    "memberof": "src/utils/text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/text.js~Inflect",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{Inflect}",
    "description": "Wrapper around {@link inflect()} which uses the word \"No\" instead of \"no\" for the\nzero case, i.e. Inflect() is the capitalized form of inflect()",
    "lineNumber": 213,
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "number of items"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "singular",
        "description": "singular form"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "plural",
        "description": "optional plural form"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'No'",
        "defaultRaw": "'No'",
        "name": "no",
        "description": "optional word to use when `n` is 0"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "function",
    "name": "splitParas",
    "memberof": "src/utils/text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/text.js~splitParas",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{splitParas}",
    "description": null,
    "lineNumber": 218,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "file",
    "name": "src/utils/time.js",
    "content": "/**\n * Function to generate a debouncer function which will call the wrapped function after\n * a timeout.  If the debouncer function is called again before the wrapped function has\n * been called then the debounced will reset the timer.\n * @param {Function} func - function to be debounced\n * @param {Function} [timeout=300] - timeout in milliseconds\n * @return {Function} debounced function\n */\nexport function debounce(func, timeout=300) {\n  let timer;\n  return (...args) => {\n    clearTimeout(timer);\n    timer = setTimeout(\n      () => func.apply(this, args),\n      timeout\n    );\n  };\n}\n\n/**\n * Function which returns a Promise which will resolve after a delay.\n * @param {Integer} ms - delay in millseconds\n * @return {Promise} - promise which will resolve after the delay\n */\nexport const sleep = ms =>\n  new Promise(r => setTimeout(r, ms));\n",
    "static": true,
    "longname": "/Users/abw/js/badger-utils/src/utils/time.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 88,
    "kind": "function",
    "name": "debounce",
    "memberof": "src/utils/time.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/time.js~debounce",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{debounce}",
    "description": "Function to generate a debouncer function which will call the wrapped function after\na timeout.  If the debouncer function is called again before the wrapped function has\nbeen called then the debounced will reset the timer.",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": "function to be debounced"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "300",
        "defaultRaw": 300,
        "name": "timeout",
        "description": "timeout in milliseconds"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "debounced function"
    }
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "sleep",
    "memberof": "src/utils/time.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/time.js~sleep",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{sleep}",
    "description": "Function which returns a Promise which will resolve after a delay.",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "ms",
        "description": "delay in millseconds"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "promise which will resolve after the delay"
    }
  },
  {
    "kind": "index",
    "content": "# badger-utils\n\nThis contains a number of Javascript utility functions that\nI tend to use in most of my Javascript projects.\n\nSome of these functions date back to long, long ago, before\nlibraries like [underscore](https://underscorejs.org/) and\n[lodash](https://lodash.com/) existed.  There probably isn't\nmuch in here that isn't already covered by those libraries.\n\nFor new projects it's probably best to start out using one\nof those if you don't mind the overhead.\n\n## Installation\n\nInstall `badger-utils` using your favourite package manager.\n\n### npm\n\n    npm install @abw/badger-utils\n\n### pnpm\n\n    pnpm add @abw/badger-utils\n\n### yarn\n\n    yarn add @abw/badger-utils\n\n## Documentation\n\nRead the [API documentation](https://abw.github.io/badger-utils/docs/) for further information\nabout the utility functions provided.\n\n## Author\n\nAndy Wardley <abw@wardley.org>",
    "longname": "/Users/abw/js/badger-utils/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@abw/badger-utils\",\n  \"version\": \"1.0.2\",\n  \"description\": \"Javascript utility modules\",\n  \"type\": \"module\",\n  \"main\": \"dist/badger-utils.cjs.js\",\n  \"module\": \"dist/badger-utils.esm.js\",\n  \"browser\": \"dist/badger-utils.umd.js\",\n  \"exports\": {\n    \".\": {\n      \"require\": \"./dist/badger-utils.cjs.js\",\n      \"import\": \"./dist/badger-utils.esm.js\"\n    }\n  },\n  \"author\": \"Andy Wardley\",\n  \"license\": \"MIT\",\n  \"files\": [\n    \"dist\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/abw/badger-utils.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/abw/badger-utils/issues\"\n  },\n  \"scripts\": {\n    \"build\": \"rollup -c\",\n    \"dev\": \"rollup -c -w\",\n    \"lint\": \"eslint 'src/**/*'\",\n    \"docs:build\": \"esdoc\",\n    \"docs:serve\": \"serve docs\",\n    \"test\": \"ava\",\n    \"pretest\": \"pnpm run build\"\n  },\n  \"keywords\": [\n    \"badger\",\n    \"utility\"\n  ],\n  \"devDependencies\": {\n    \"@itsjamie/esdoc-cli\": \"^0.5.0\",\n    \"@itsjamie/esdoc-core\": \"^0.5.0\",\n    \"@itsjamie/esdoc-importpath-plugin\": \"^0.5.0\",\n    \"@itsjamie/esdoc-inject-style-plugin\": \"^0.5.0\",\n    \"@itsjamie/esdoc-standard-plugin\": \"^0.5.0\",\n    \"@rollup/plugin-commonjs\": \"^11.0.1\",\n    \"@rollup/plugin-node-resolve\": \"^7.1.3\",\n    \"ava\": \"^4.3.0\",\n    \"eslint\": \"^8.20.0\",\n    \"rollup\": \"^2\",\n    \"rollup-plugin-terser\": \"^7.0.2\"\n  },\n  \"dependencies\": {\n  }\n}\n",
    "longname": "/Users/abw/js/badger-utils/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]